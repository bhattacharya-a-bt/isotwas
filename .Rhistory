get_best <- function(list_mods,G=G){
r2 = as.matrix(unlist(sapply(list_mods, function(y) sapply(y,function(x) x$R2))))
l_nrows = sapply(list_mods, function(y) sapply(y,function(x) nrow(x$Model)))
r2[l_nrows == 0] = 0
r2[is.na(r2)] = 0
bundle = cbind(apply(r2,1,which.max),1:G)
return(lapply(1:G,
function(i) list_mods[[bundle[i,1]]][[bundle[i,2]]]))
}
if ('mrce_lasso' %in% method){
if (verbose){print('Running mrce_lasso')}
mrce_lasso = list()
for (i in 1:omega_nlambda){
mrce_lasso = rlist::list.append(mrce_lasso,
compute_mrce(X = X,
Y = Y,
lambda = NULL,
nlambda =
predict_nlambda,
Omega =
omega_list$icov[[i]],
nfolds = nfolds,
tol.in = tol.in,
maxit.in = maxit.in,
verbose = verbose,
seed = seed))
}
all_models = rlist::list.append(all_models,get_best(mrce_lasso,
G = G))
}
all_models = list()
if ('mrce_lasso' %in% method){
if (verbose){print('Running mrce_lasso')}
mrce_lasso = list()
for (i in 1:omega_nlambda){
mrce_lasso = rlist::list.append(mrce_lasso,
compute_mrce(X = X,
Y = Y,
lambda = NULL,
nlambda =
predict_nlambda,
Omega =
omega_list$icov[[i]],
nfolds = nfolds,
tol.in = tol.in,
maxit.in = maxit.in,
verbose = verbose,
seed = seed))
}
all_models = rlist::list.append(all_models,get_best(mrce_lasso,
G = G))
}
method
## CURDS AND WHEY
if ('curds_whey' %in% method){
if (verbose){print('Running curds_whey')}
best_curds_whey = compute_curds_whey(X,
Y,
family = family,
alpha = alpha,
nfolds = nfolds,
verbose = verbose,
par = F,
n.cores = NULL,
tx_names = NULL,
seed)
all_models = rlist::list.append(all_models,best_curds_whey)
}
## MULTIVARATE ELASTIC NET
if ('multi_enet' %in% method){
if (verbose){print('Running multi_enet')}
best_multi_enet =
multivariate_elasticnet(X = X,
Y = Y,
Omega =
omega_list$icov[[omega_nlambda]],
scale = scale,
alpha = alpha,
nfolds = nfolds,
verbose = verbose,
par = par,
n.cores = n.cores,
tx_names = tx_names,
seed = seed)
all_models = rlist::list.append(all_models,best_multi_enet)
}
# MVSUSIE
if ('mvsusie' %in% method){
if (verbose){print('Running mvsusie')}
mmbr_mod = multivariate_mmbr(X = X,
Y = Y,
nfolds = nfolds,
verbose = verbose,
tx_names = tx_names,
seed = seed)
all_models = rlist::list.append(all_models,mmbr_mod)
}
if ('finemap' %in% method){
if (verbose){print('Running finemap')}
best_finemap = compute_finemap_regress(X = X,
Y = Y,
Y.rep = Y.rep,
R = R,
id = id,
nfolds = nfolds,
verbose = verbose,
tx_names = tx_names,
coverage = coverage,
seed = seed)
all_models = rlist::list.append(all_models,best_finemap)
}
### UNIVARIATE FUSION
if ('univariate' %in% method){
if (verbose){print('Running univariate')}
uni_enet = univariate_elasticnet(X = X,
Y = Y,
Omega = omega_list[[omega_nlambda]],
family = family,
scale = scale,
alpha = alpha,
nfolds = nfolds,
verbose = verbose,
par = par,
n.cores = n.cores,
tx_names = tx_names,
seed = seed)
uni_blup = univariate_blup(X = X,
Y = Y,
Omega = omega_list[[omega_nlambda]],
scale = scale,
alpha = alpha,
nfolds = nfolds,
verbose = verbose,
par = par,
n.cores = n.cores,
tx_names = tx_names,
seed = seed)
uni_susie = univariate_susie(X = X,
Y = Y,
Omega = omega_list[[omega_nlambda]],
scale = scale,
alpha = alpha,
nfolds = nfolds,
verbose = verbose,
par = par,
n.cores = n.cores,
tx_names = tx_names,
seed = seed)
univariate = list(uni_enet,
uni_blup,
uni_susie)
all_models = rlist::list.append(all_models,get_best(univariate,
G = G))
}
all_models
all_models[[1]]
all_models = list()
if ('mrce_lasso' %in% method){
if (verbose){print('Running mrce_lasso')}
mrce_lasso = list()
for (i in 1:omega_nlambda){
mrce_lasso = rlist::list.append(mrce_lasso,
compute_mrce(X = X,
Y = Y,
lambda = NULL,
nlambda =
predict_nlambda,
Omega =
omega_list$icov[[i]],
nfolds = nfolds,
tol.in = tol.in,
maxit.in = maxit.in,
verbose = verbose,
seed = seed))
}
all_models = rlist::list.append(all_models,get_best(mrce_lasso,
G = G))
}
## CURDS AND WHEY
if ('curds_whey' %in% method){
if (verbose){print('Running curds_whey')}
best_curds_whey = compute_curds_whey(X,
Y,
family = family,
alpha = alpha,
nfolds = nfolds,
verbose = verbose,
par = F,
n.cores = NULL,
tx_names = NULL,
seed)
all_models = rlist::list.append(all_models,best_curds_whey)
}
## MULTIVARATE ELASTIC NET
if ('multi_enet' %in% method){
if (verbose){print('Running multi_enet')}
best_multi_enet =
multivariate_elasticnet(X = X,
Y = Y,
Omega =
omega_list$icov[[omega_nlambda]],
scale = scale,
alpha = alpha,
nfolds = nfolds,
verbose = verbose,
par = par,
n.cores = n.cores,
tx_names = tx_names,
seed = seed)
all_models = rlist::list.append(all_models,best_multi_enet)
}
all_models
length(all_models)
# MVSUSIE
if ('mvsusie' %in% method){
if (verbose){print('Running mvsusie')}
mmbr_mod = multivariate_mmbr(X = X,
Y = Y,
nfolds = nfolds,
verbose = verbose,
tx_names = tx_names,
seed = seed)
all_models = rlist::list.append(all_models,mmbr_mod)
}
if ('finemap' %in% method){
if (verbose){print('Running finemap')}
best_finemap = compute_finemap_regress(X = X,
Y = Y,
Y.rep = Y.rep,
R = R,
id = id,
nfolds = nfolds,
verbose = verbose,
tx_names = tx_names,
coverage = coverage,
seed = seed)
all_models = rlist::list.append(all_models,best_finemap)
}
### UNIVARIATE FUSION
if ('univariate' %in% method){
if (verbose){print('Running univariate')}
uni_enet = univariate_elasticnet(X = X,
Y = Y,
Omega = omega_list[[omega_nlambda]],
family = family,
scale = scale,
alpha = alpha,
nfolds = nfolds,
verbose = verbose,
par = par,
n.cores = n.cores,
tx_names = tx_names,
seed = seed)
uni_blup = univariate_blup(X = X,
Y = Y,
Omega = omega_list[[omega_nlambda]],
scale = scale,
alpha = alpha,
nfolds = nfolds,
verbose = verbose,
par = par,
n.cores = n.cores,
tx_names = tx_names,
seed = seed)
uni_susie = univariate_susie(X = X,
Y = Y,
Omega = omega_list[[omega_nlambda]],
scale = scale,
alpha = alpha,
nfolds = nfolds,
verbose = verbose,
par = par,
n.cores = n.cores,
tx_names = tx_names,
seed = seed)
univariate = list(uni_enet,
uni_blup,
uni_susie)
all_models = rlist::list.append(all_models,get_best(univariate,
G = G))
}
all_models
all_models[[1]]
list_m
list_mods = all_models
G
length(all_models)
isotwas_mod = get_best(all_models,
G = length(all_models))
isotwas_mod = get_best(all_models,
G = G)
isotwas_mod
list_mods = all_models
G
r2 = as.matrix(unlist(sapply(list_mods, function(y) sapply(y,function(x) x$R2))))
r2
l_nrows = sapply(list_mods, function(y) sapply(y,function(x) nrow(x$Model)))
l_nrows
r2[l_nrows == 0] = 0
r2
r2[is.na(r2)] = 0
r2
bundle = cbind(apply(r2,1,which.max),1:G)
bandle
bundle
if (return_all){
r2 = sapply(all_models, function(y) sapply(y,function(x) x$R2))
r2.df = as.data.frame(cbind(colnames(Y),r2))
colnames(r2.df) = c('Transcript',method)
isotwas_mod = list(Model = get_best(all_models,
G = G),
R2 = r2.df)
}
r2
r2 = matrix(unlist(sapply(list_mods, function(y) sapply(y,function(x) x$R2))),
nrow = G)
r2
r2 = matrix(unlist(sapply(list_mods, function(y) sapply(y,function(x) x$R2))),
nrow = G)
l_nrows = sapply(list_mods, function(y) sapply(y,function(x) nrow(x$Model)))
r2[l_nrows == 0] = 0
r2[is.na(r2)] = 0
r2
bundle
bundle = cbind(apply(r2,1,which.max),1:G)
bundle
get_best <- function(list_mods,G=G){
r2 = matrix(unlist(sapply(list_mods, function(y) sapply(y,function(x) x$R2))),
nrow = G)
l_nrows = sapply(list_mods, function(y) sapply(y,function(x) nrow(x$Model)))
r2[l_nrows == 0] = 0
r2[is.na(r2)] = 0
bundle = cbind(apply(r2,1,which.max),1:G)
return(lapply(1:G,
function(i) list_mods[[bundle[i,1]]][[bundle[i,2]]]))
}
isotwas_mod = get_best(all_models,
G = G)
colnames(Y) = tx_names
if (return_all){
r2 = sapply(all_models, function(y) sapply(y,function(x) x$R2))
r2.df = as.data.frame(cbind(colnames(Y),r2))
colnames(r2.df) = c('Transcript',method)
isotwas_mod = list(Model = get_best(all_models,
G = G),
R2 = r2.df)
}
isotwas_mod
devtools::install_github('bhattacharya-a-bt/isotwas')
isotwas_mod
isotwas_model
model = isotwas_model
model
convert_model = function(model){
mod = as.data.frame(matrix(nrow = 0,
ncol = 5))
for (i in 1:length(model)){
this.model = model[[i]]$Model
this.model$Transcript = model[[i]]$Transcript
this.model$R2 = model[[i]]$R2
this.model$R2.P = model[[i]]$P
mod = rbind(mod,
this.model)
}
return(mod)
}
convert_model(model)
mode
model
mod = as.data.frame(matrix(nrow = 0,
ncol = 5))
mod
for (i in 1:length(model)){
this.model = model[[i]]$Model
this.model$Transcript = model[[i]]$Transcript
this.model$R2 = model[[i]]$R2
this.model$R2.P = model[[i]]$P
mod = rbind(mod,
this.model)
}
mod
mod = as.data.frame(matrix(nrow = 0,
ncol = 5))
i=1
this.model = model[[i]]$Model
this.model
i
i =1
model[[i]]
mod = as.data.frame(matrix(nrow = 0,
ncol = 5))
for (i in 1:length(model)){
this.model = model$Model[[i]]$Model
this.model$Transcript = model$Model[[i]]$Model$Transcript
this.model$R2 = model$Model[[i]]$Model$R2
this.model$R2.P = model$Model[[i]]$Model$P
mod = rbind(mod,
this.model)
}
mod
mod = as.data.frame(matrix(nrow = 0,
ncol = 5))
colnames(mod) = c('SNP','Weight','Transcript','R2','P','')
for (i in 1:length(model)){
this.model = as.data.frame(model$Model[[i]]$Model)
this.model$Transcript = model$Model[[i]]$Model$Transcript
this.model$R2 = model$Model[[i]]$Model$R2
this.model$R2.P = model$Model[[i]]$Model$P
mod = rbind(mod,
this.model)
}
mod = as.data.frame(matrix(nrow = 0,
ncol = 5))
colnames(mod) = c('SNP','Weight','Transcript','R2','P','')
mod = as.data.frame(matrix(nrow = 0,
ncol = 5))
colnames(mod) = c('SNP','Weight','Transcript','R2','P')
for (i in 1:length(model)){
this.model = as.data.frame(model$Model[[i]]$Model)
this.model$Transcript = model$Model[[i]]$Model$Transcript
this.model$R2 = model$Model[[i]]$Model$R2
this.model$R2.P = model$Model[[i]]$Model$P
mod = rbind(mod,
this.model)
}
mod
mod = as.data.frame(matrix(nrow = 0,
ncol = 5))
colnames(mod) = c('SNP','Weight','Transcript','R2','P')
i1=
this.model = as.data.frame(model$Model[[i]]$Model)
this.model
this.model$Transcript = model$Model[[i]]$Model$Transcript
this.model$Transcript
model$Model[[i]]$Model$Transcript
model$Model[[i]]$Transcript
mod = as.data.frame(matrix(nrow = 0,
ncol = 5))
colnames(mod) = c('SNP','Weight','Transcript','R2','P')
for (i in 1:length(model)){
this.model = as.data.frame(model$Model[[i]]$Model)
this.model$Transcript = model$Model[[i]]$Transcript
this.model$R2 = model$Model[[i]]$R2
this.model$R2.P = model$Model[[i]]$P
mod = rbind(mod,
this.model)
}
mod
#' Convert isotwas model list to tibble
#'
#' The function converts an isotwas model from compute_isotwas() and returns a tibble
#'
#' @param model
#'
#' @return tibble of the model
#'
#' @export
convert_model = function(model){
mod = as.data.frame(matrix(nrow = 0,
ncol = 5))
colnames(mod) = c('SNP','Weight','Transcript','R2','P')
for (i in 1:length(model)){
this.model = as.data.frame(model$Model[[i]]$Model)
this.model$Transcript = model$Model[[i]]$Transcript
this.model$R2 = model$Model[[i]]$R2
this.model$R2.P = model$Model[[i]]$P
mod = rbind(mod,
this.model)
}
return(tibble::as_tibble(mod))
}
convert_model(isotwas_model)
names(isotwas_mod)
build_articles()
build_site()
build_site()
build_site()
build_site
require(devtools)
require(pkgdown)
require(usethis)
build_site()
build_site()
build_site()
build_site(rmarkdown.html_vignette.check_title = FALSE)
build_site()
build_site()
build_site()
build_site()
build_site()
clean_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_site()
build_home()
build_site()
build_site()
usethis::use_vignette("motivation")
require(pkgdown)
build_site()
build_site()
build_articles()
build_site()
build_site()
build_site()
build_site()
