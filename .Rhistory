require(bigsnpr)
setwd('/Library/Frameworks/R.framework/Versions/4.1/Resources/library')
setwd('bigsnpr/')
setwd('extdata/')
snps = snp_attach(snp_readBed2('example.bed',
backingfile = tempfile()))
dim(snps$fam)
train = sample(1:nrow(snps$fam),
300)
test = (1:nrow(snps$fam))[-train]
snp_train = snp_attach(subset(snps,
ind.row = train))
snp_ld = snp_attach(subset(snps,
ind.row = test))
bigsnpr::snp_writeBed(snp_train,
'/Users/arjunbhattacharya/Documents/isotwas/extdata/train.bed')
bigsnpr::snp_writeBed(snp_ld,
'/Users/arjunbhattacharya/Documents/isotwas/extdata/ld.bed')
set.seed(1789)
k = nrow(snp_train$map)
n = nrow(snp_train$fam)
p = 3
isoform_mat = matrix(nrow = n,
ncol = p)
effects = rnorm(k*p, mean = 0, sd = 0.05)
effects[rbinom(k*p,1,0.03) != 1] = 0
b_isoqtl = matrix(effects, nrow = k)
isoform_mat = (snp_train$genotypes[] %*% b_isoqtl) + matrix(rnorm(n*p,0,0.05),
nrow = n)
rownames(isoform_mat) = paste0('Sample',1:n)
colnames(isoform_mat) = paste0('Isoform',1:p)
dim(isoform_mat)
saveRDS(isoform_mat,
'/Users/arjunbhattacharya/Documents/isotwas/extdata/isoform_exp.RDS')
gwas = data.frame(SNP = snp_train$map$marker.ID,
Chromosome = 1,
Position = snp_train$map$physical.pos,
A1 = snp_train$map$allele1,
A2 = snp_train$map$allele2,
Z = rnorm(nrow(snp_train$map),0,2),
SE = abs(rnorm(nrow(snp_train$map),
0,0.02)))
require(bigsnpr)
setwd('/Library/Frameworks/R.framework/Versions/4.1/Resources/library')
setwd('bigsnpr/')
setwd('extdata/')
snps = snp_attach(snp_readBed2('example.bed',
backingfile = tempfile()))
dim(snps$fam)
train = sample(1:nrow(snps$fam),
300)
test = (1:nrow(snps$fam))[-train]
snp_train = snp_attach(subset(snps,
ind.row = train))
snp_ld = snp_attach(subset(snps,
ind.row = test))
bigsnpr::snp_writeBed(snp_train,
'/Users/arjunbhattacharya/Documents/isotwas/extdata/train.bed')
bigsnpr::snp_writeBed(snp_ld,
'/Users/arjunbhattacharya/Documents/isotwas/extdata/ld.bed')
set.seed(1789)
k = nrow(snp_train$map)
n = nrow(snp_train$fam)
p = 3
isoform_mat = matrix(nrow = n,
ncol = p)
effects = rnorm(k*p, mean = 0, sd = 0.05)
effects[rbinom(k*p,1,0.03) != 1] = 0
b_isoqtl = matrix(effects, nrow = k)
isoform_mat = (snp_train$genotypes[] %*% b_isoqtl) + matrix(rnorm(n*p,0,0.05),
nrow = n)
rownames(isoform_mat) = paste0('Sample',1:n)
colnames(isoform_mat) = paste0('Isoform',1:p)
dim(isoform_mat)
saveRDS(isoform_mat,
'/Users/arjunbhattacharya/Documents/isotwas/extdata/isoform_exp.RDS')
gwas = data.frame(SNP = snp_train$map$marker.ID,
Chromosome = 1,
Position = snp_train$map$physical.pos,
A1 = snp_train$map$allele1,
A2 = snp_train$map$allele2,
Z = rnorm(nrow(snp_train$map),0,2),
SE = abs(rnorm(nrow(snp_train$map),
0,0.02)))
gwas$Beta = gwas$Z * gwas$SE
require(bigsnpr)
setwd('/Library/Frameworks/R.framework/Versions/4.1/Resources/library')
setwd('bigsnpr/')
setwd('extdata/')
snps = snp_attach(snp_readBed2('example.bed',
backingfile = tempfile()))
dim(snps$fam)
train = sample(1:nrow(snps$fam),
300)
test = (1:nrow(snps$fam))[-train]
snp_train = snp_attach(subset(snps,
ind.row = train))
snp_ld = snp_attach(subset(snps,
ind.row = test))
bigsnpr::snp_writeBed(snp_train,
'/Users/arjunbhattacharya/Documents/isotwas/extdata/train.bed')
bigsnpr::snp_writeBed(snp_ld,
'/Users/arjunbhattacharya/Documents/isotwas/extdata/ld.bed')
set.seed(1789)
k = nrow(snp_train$map)
n = nrow(snp_train$fam)
p = 3
isoform_mat = matrix(nrow = n,
ncol = p)
effects = rnorm(k*p, mean = 0, sd = 0.05)
effects[rbinom(k*p,1,0.03) != 1] = 0
b_isoqtl = matrix(effects, nrow = k)
isoform_mat = (snp_train$genotypes[] %*% b_isoqtl) + matrix(rnorm(n*p,0,0.05),
nrow = n)
rownames(isoform_mat) = paste0('Sample',1:n)
colnames(isoform_mat) = paste0('Isoform',1:p)
dim(isoform_mat)
saveRDS(isoform_mat,
'/Users/arjunbhattacharya/Documents/isotwas/extdata/isoform_exp.RDS')
gwas = data.frame(SNP = snp_train$map$marker.ID,
Chromosome = 1,
Position = snp_train$map$physical.pos,
A1 = snp_train$map$allele1,
A2 = snp_train$map$allele2,
Z = rnorm(nrow(snp_train$map),0,2),
SE = abs(rnorm(nrow(snp_train$map),
0,0.02)))
gwas$Beta = gwas$Z * gwas$SE
require(bigsnpr)
setwd('/Library/Frameworks/R.framework/Versions/4.1/Resources/library')
setwd('bigsnpr/')
setwd('extdata/')
snps = snp_attach(snp_readBed2('example.bed',
backingfile = tempfile()))
dim(snps$fam)
train = sample(1:nrow(snps$fam),
300)
test = (1:nrow(snps$fam))[-train]
snp_train = snp_attach(subset(snps,
ind.row = train))
snp_ld = snp_attach(subset(snps,
ind.row = test))
bigsnpr::snp_writeBed(snp_train,
'/Users/arjunbhattacharya/Documents/isotwas/extdata/train.bed')
bigsnpr::snp_writeBed(snp_ld,
'/Users/arjunbhattacharya/Documents/isotwas/extdata/ld.bed')
set.seed(1789)
k = nrow(snp_train$map)
n = nrow(snp_train$fam)
p = 3
isoform_mat = matrix(nrow = n,
ncol = p)
effects = rnorm(k*p, mean = 0, sd = 0.05)
effects[rbinom(k*p,1,0.03) != 1] = 0
b_isoqtl = matrix(effects, nrow = k)
isoform_mat = (snp_train$genotypes[] %*% b_isoqtl) + matrix(rnorm(n*p,0,0.05),
nrow = n)
rownames(isoform_mat) = paste0('Sample',1:n)
colnames(isoform_mat) = paste0('Isoform',1:p)
dim(isoform_mat)
saveRDS(isoform_mat,
'/Users/arjunbhattacharya/Documents/isotwas/extdata/isoform_exp.RDS')
gwas = data.frame(SNP = snp_train$map$marker.ID,
Chromosome = 1,
Position = snp_train$map$physical.pos,
A1 = snp_train$map$allele1,
A2 = snp_train$map$allele2,
Z = rnorm(nrow(snp_train$map),0,2),
SE = abs(rnorm(nrow(snp_train$map),
0,0.02)))
gwas$Beta = gwas$Z * gwas$SE
write.table(gwas,'/Users/arjunbhattacharya/Documents/isotwas/extdata/gwas.txt',
sep='\t',colnames = T, rownames = F,quote=F)
write.table(gwas,'/Users/arjunbhattacharya/Documents/isotwas/extdata/gwas.txt',
sep='\t',col.names = T, row.names = F,quote=F)
library(isotwas)
snps = bigsnpr::snp_attach(bigsnpr::snp_readBed2('extdata/train.bed',
backingfile = tempfile()))
devtools::install_github('bhattacharya-a-bt/isotwas')
system.file("inst", "extdata", "train.bed", package = "isotwas")
system.file("extdata", "train.bed", package = "isotwas")
train_bed = system.file("extdata", "train.bed", package = "isotwas")
snps = bigsnpr::snp_attach(bigsnpr::snp_readBed2(train_bed,
backingfile = tempfile()))
snps
dim(snps$genotypes[])
tx_data = readRDS(system.file("extdata", "isoform_exp.RDS", package = "isotwas"))
dim(tx_data)
tx_data
class(tx_data)
boot_list = lapply(1:10,function(i){jitter(isoform_mat)})
isoform_mat_rep = rlist::list.rbind(boot_list)
rownames(isoform_mat_rep) = rep(paste0('Sample',1:n),10)
colnames(isoform_mat_rep) = paste0('Isoform',1:p)
dim(isoform_mat_rep)
isotwas_model = isotwas::compute_isotwas(X = snps$genotypes[],
Y = isoform_mat,
Y.rep = isoform_mat_rep,
R = 10,
id = rownames(isoform_mat_rep),
omega_est = 'replicates',
omega_nlambda = 5,
method = c('mrce_lasso',
'multi_enet',
'univariate',
'mvsusie'),
predict_nlambda = 10,
family = 'gaussian',
scale = FALSE,
alpha = 0.5,
nfolds = 5,
verbose = FALSE,
tx_names = paste0('Isoform',1:3),
seed = 1789,
run_all = FALSE,
return_all = TRUE)
require(isotwas)
isotwas_model = compute_isotwas(X = snps$genotypes[],
Y = isoform_mat,
Y.rep = isoform_mat_rep,
R = 10,
id = rownames(isoform_mat_rep),
omega_est = 'replicates',
omega_nlambda = 5,
method = c('mrce_lasso',
'multi_enet',
'univariate',
'mvsusie'),
predict_nlambda = 10,
family = 'gaussian',
scale = FALSE,
alpha = 0.5,
nfolds = 5,
verbose = FALSE,
tx_names = paste0('Isoform',1:3),
seed = 1789,
run_all = FALSE,
return_all = TRUE)
#' Convert isotwas model list to tibble
#'
#' The function converts an isotwas model and returns a tibble
#'
#' @param model
#'
#' @return tibble of the model
#'
#' @export
convert_model = function(model){
mod = as.data.frame(matrix(nrow = 0,
ncol = 5))
colnames(mod) = c('SNP','Weight','Transcript','R2','P')
for (i in 1:length(model$Model)){
this.model = as.data.frame(model$Model[[i]]$Model)
this.model$Transcript = model$Model[[i]]$Transcript
this.model$R2 = model$Model[[i]]$R2
this.model$R2.P = model$Model[[i]]$P
mod = rbind(mod,
this.model)
}
return(tibble::as_tibble(mod))
}
devtools::install_github('bhattacharya-a-bt/isotwas')
devtools::install_github('bhattacharya-a-bt/isotwas')
require(isotwas)
train_bed = system.file("extdata", "train.bed", package = "isotwas")
snps = bigsnpr::snp_attach(bigsnpr::snp_readBed2(train_bed,
backingfile = tempfile()))
dim(snps$genotypes[])
isoform_mat = readRDS(system.file("extdata", "isoform_exp.RDS", package = "isotwas"))
dim(isoform_mat)
boot_list = lapply(1:10,function(i){jitter(isoform_mat)})
isoform_mat_rep = rlist::list.rbind(boot_list)
rownames(isoform_mat_rep) = rep(paste0('Sample',1:nrow(snps$fam)),10)
colnames(isoform_mat_rep) = paste0('Isoform',1:ncol(isoform_mat_rep))
dim(isoform_mat_rep)
isotwas_model = compute_isotwas(X = snps$genotypes[],
Y = isoform_mat,
Y.rep = isoform_mat_rep,
R = 10,
id = rownames(isoform_mat_rep),
omega_est = 'replicates',
omega_nlambda = 5,
method = c('mrce_lasso',
'multi_enet',
'univariate',
'mvsusie'),
predict_nlambda = 10,
family = 'gaussian',
scale = FALSE,
alpha = 0.5,
nfolds = 5,
verbose = TRUE,
tx_names = paste0('Isoform',1:3),
seed = 1789,
run_all = FALSE,
return_all = TRUE)
isotwas_tsv = convert_model(isotwas_model)
isotwas_tsv
unique(isotwas_tsv$Transcript
)
saveRDS(isotwas_model,'/Users/arjunbhattacharya/Documents/isotwas/inst/extdata/model_example.RDS')
write.table(isotwas_tsv,'/Users/arjunbhattacharya/Documents/isotwas/inst/extdata/model_example.tsv',col.names=T,row.names=F,quote=F,sep='\t')
library(isotwas)
model_isotwas = readRDS(system.file("extdata", "model_example.RDS", package = "isotwas"))
devtools::install_github('bhattacharya-a-bt/isotwas')
model_isotwas = readRDS(system.file("extdata", "model_example.RDS", package = "isotwas"))
model_isotwaso
model_isotwas
library(isotwas)
model_tib = read.table(system.file("extdata", "model_example.tsv", package = "isotwas")
model_tib = read.table(system.file("extdata", "model_example.tsv", package = "isotwas"))
model_tib
train_bed = system.file("extdata", "train.bed", package = "isotwas")
snps = bigsnpr::snp_attach(bigsnpr::snp_readBed2(train_bed,
backingfile = tempfile()))
dim(snps$genotypes[])
isoform_mat = readRDS(system.file("extdata", "isoform_exp.RDS", package = "isotwas"))
dim(isoform_mat)
boot_list = lapply(1:10,function(i){jitter(isoform_mat)})
isoform_mat_rep = rlist::list.rbind(boot_list)
rownames(isoform_mat_rep) = rep(paste0('Sample',1:nrow(snps$fam)),10)
colnames(isoform_mat_rep) = paste0('Isoform',1:ncol(isoform_mat_rep))
dim(isoform_mat_rep)
snp_mat = as.matrix(snps$genotypes[])
snp_mat
snps$map$marker.ID
snps$fam$sample.ID
snp_mat = as.matrix(snps$genotypes[])
colnames(snp_mat) = snps$map$marker.ID
rownames(snp_mat) = snps$fam$sample.ID
isotwas_model = compute_isotwas(X = snp_mat,
Y = isoform_mat,
Y.rep = isoform_mat_rep,
R = 10,
id = rownames(isoform_mat_rep),
omega_est = 'replicates',
omega_nlambda = 5,
method = c('mrce_lasso',
'multi_enet',
'univariate',
'mvsusie'),
predict_nlambda = 10,
family = 'gaussian',
scale = FALSE,
alpha = 0.5,
nfolds = 5,
verbose = TRUE,
tx_names = paste0('Isoform',1:3),
seed = 1789,
run_all = FALSE,
return_all = TRUE)
model_isotwas$Model
colnames(snp_mat)
snp_mat = as.matrix(snps$genotypes[])
colnames(snp_mat) = snps$map$marker.ID
rownames(snp_mat) = snps$fam$sample.ID
isotwas_model = compute_isotwas(X = snp_mat,
Y = isoform_mat,
Y.rep = isoform_mat_rep,
R = 10,
id = rownames(isoform_mat_rep),
omega_est = 'replicates',
omega_nlambda = 5,
method = c('multi_enet',
'univariate',
'mvsusie'),
predict_nlambda = 10,
family = 'gaussian',
scale = FALSE,
alpha = 0.5,
nfolds = 5,
verbose = TRUE,
tx_names = paste0('Isoform',1:3),
seed = 1789,
run_all = FALSE,
return_all = TRUE)
isotwas_model$Model
isotwas_model$Model[[1]]
isotwas_model$Model[[1]]$Transcript
isotwas_model$Model[[1]]$Model
isotwas_model$Model[[12]]$Model
isotwas_model$Model[[2]]$Model
isotwas_model$Model[[3]]$Model
isotwas_tsv = convert_model(isotwas_model)
isotwas_tsv
convert_model = function(model,
snp_annot = NULL,
snp_var = NULL){
mod = as.data.frame(matrix(nrow = 0,
ncol = 5))
colnames(mod) = c('SNP','Weight','Transcript','R2','P')
for (i in 1:length(model$Model)){
this.model = as.data.frame(model$Model[[i]]$Model)
this.model$Transcript = model$Model[[i]]$Transcript
this.model$R2 = model$Model[[i]]$R2
this.model$R2.P = model$Model[[i]]$P
mod = rbind(mod,
this.model)
}
if (!is.null(snp_obj)){
if (!'SNP' %in% colnames(snp_obj)){
colnames(snp_obj)[which(colnames(snp_obj) == snp_var)] = 'SNP'
}
mod = merge(mod,snp_obj,by='SNP')
}
return(tibble::as_tibble(mod))
}
#' Convert isotwas model list to tibble
#'
#' The function converts an isotwas model and returns a tibble
#'
#' @param model, isotwas model
#' @param snp_annot, annotations for SNPs, typically map obj from bigsnpr
#' @param snp_var, column name of SNP marker id
#'
#' @return tibble of the model
#'
#' @export
convert_model = function(model,
snp_annot = NULL,
snp_var = NULL){
mod = as.data.frame(matrix(nrow = 0,
ncol = 5))
colnames(mod) = c('SNP','Weight','Transcript','R2','P')
for (i in 1:length(model$Model)){
this.model = as.data.frame(model$Model[[i]]$Model)
this.model$Transcript = model$Model[[i]]$Transcript
this.model$R2 = model$Model[[i]]$R2
this.model$R2.P = model$Model[[i]]$P
mod = rbind(mod,
this.model)
}
if (!is.null(snp_obj)){
if (!'SNP' %in% colnames(snp_obj)){
colnames(snp_obj)[which(colnames(snp_obj) == snp_var)] = 'SNP'
}
mod = merge(mod,snp_obj,by='SNP')
}
return(tibble::as_tibble(mod))
}
isotwas_tsv = convert_model(isotwas_model,snp_annot = snps$fam,
snp_var = 'marker.ID')
\#' Convert isotwas model list to tibble
#'
#' The function converts an isotwas model and returns a tibble
#'
#' @param model, isotwas model
#' @param snp_annot, annotations for SNPs, typically map obj from bigsnpr
#' @param snp_var, column name of SNP marker id
#'
#' @return tibble of the model
#'
#' @export
convert_model = function(model,
snp_annot = NULL,
snp_var = NULL){
mod = as.data.frame(matrix(nrow = 0,
ncol = 5))
colnames(mod) = c('SNP','Weight','Transcript','R2','P')
for (i in 1:length(model$Model)){
this.model = as.data.frame(model$Model[[i]]$Model)
this.model$Transcript = model$Model[[i]]$Transcript
this.model$R2 = model$Model[[i]]$R2
this.model$R2.P = model$Model[[i]]$P
mod = rbind(mod,
this.model)
}
if (!is.null(snp_annot)){
if (!'SNP' %in% colnames(snp_annot)){
colnames(snp_annot)[which(colnames(snp_annot) == snp_var)] = 'SNP'
}
mod = merge(mod,snp_annot,by='SNP')
}
return(tibble::as_tibble(mod))
}
isotwas_tsv = convert_model(isotwas_model,snp_annot = snps$fam,
snp_var = 'marker.ID')
model = isotwas_model
snp_annot = snps$map
snp_var = 'marker.ID'
mod = as.data.frame(matrix(nrow = 0,
ncol = 5))
colnames(mod) = c('SNP','Weight','Transcript','R2','P')
for (i in 1:length(model$Model)){
this.model = as.data.frame(model$Model[[i]]$Model)
this.model$Transcript = model$Model[[i]]$Transcript
this.model$R2 = model$Model[[i]]$R2
this.model$R2.P = model$Model[[i]]$P
mod = rbind(mod,
this.model)
}
mod
if (!is.null(snp_annot)){
if (!'SNP' %in% colnames(snp_annot)){
colnames(snp_annot)[which(colnames(snp_annot) == snp_var)] = 'SNP'
}
mod = merge(mod,snp_annot,by='SNP')
}
mod
write.table(isotwas_tsv,
'/Users/arjunbhattacharya/Documents/isotwas/inst/extdata/model_example.tsv',
quote = F,sep = '\t',row.names = F,col.names = T)
isotwas_tsv = convert_model(isotwas_model,snp_annot = snps$fam,
snp_var = 'marker.ID')
isotwas_tsv = convert_model(isotwas_model,snp_annot = snps$map,
snp_var = 'marker.ID')
saveRDS(isotwas_model,
'/Users/arjunbhattacharya/Documents/isotwas/inst/extdata/model_example.RDS')
write.table(isotwas_tsv,
'/Users/arjunbhattacharya/Documents/isotwas/inst/extdata/model_example.tsv',
quote = F,sep = '\t',row.names = F,col.names = T)
devtools::install_github('bhattacharya-a-bt/isotwas')
