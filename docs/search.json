[{"path":"https://bhattacharya-a-bt.github.io/isotwas/articles/association.html","id":"pre-computed-models-and-ld-matrix","dir":"Articles","previous_headings":"","what":"Pre-computed models and LD matrix","title":"Run isoTWAS associations","text":"can always use set models trained isoform expression QTL data (paired genotype RNA-seq data). convenience, trained made publicly available isoTWAS models 48 tissues Genotype-Tissue Expression Project (GTEx), adult brain cortex PsychENCODE AMP-AD, developmental brain cortex PsychENCODE. Zenodo repositories GTEx, adult cortex, developmental cortex models. Please cite manuscript associated Zenodo DOI use models. download entire Zenodo repository, may use Python package Zenodo_get (https://zenodo.org/record/1261813). install use, sample commands directly download adult cortex repository Zenodo:","code":"pip install zenodo-get zenodo_get 8048198"},{"path":[]},{"path":"https://bhattacharya-a-bt.github.io/isotwas/articles/pipeline.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Train an isoTWAS models","text":"module cover use functions isotwas train multivariate isotwas model isoform-level expression. Along way, ’ll covering practical considerations computation feature selection.","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/articles/pipeline.html","id":"train-predictive-model","dir":"Articles","previous_headings":"","what":"Train predictive model","title":"Train an isoTWAS models","text":"train multivariate model, need: matrix dosages SNPs, matrix isoform-level expressions given gene. Isoform expression estimated pseudo-alignment methods like salmon kallisto provide bootstrapped estimates expression across number iterations. information can included model training, illustrated . Practical consideration: Ideally, reduce memory usage, recommend storing genetic data PLINK format data (ideally .bed/bim/fam .pgen/.pvar/.psam). given gene, use PLINK select SNPs chromosome within 1 Megabase gene body. , can use bigsnpr package read “condensed” file set. Make sure isoform expression matrix log-transformed residualized covariates normally used QTL analysis (.e., age, sex, principal components genotype matrix, PEER factors hidden covariates prior full expression matrix). order ensure maximal overlap model GWAS eventually use trait mapping, suggest restricting SNPs QTL panel present LD reference panel annotated HapMap3 Project. ensure proper standard error calculations. vignette training model, ’ll use toy genetic transcriptomic data provided. reads SNP matrix dimensions \\(300 \\times 4542\\), samples along rows SNPs along columns isoform-level expression matrix dimension \\(300 \\times 3\\), isoforms along columns. Practical consideration: Though requirement isotwas pipeline, recommend feature selection step based cis-heritability isoform-level expression. Prior model training isoforms given gene, recommend users compute heritability expressed isoforms gene using GCTA (ideally gcta-nr-robust executable FUSION). recommend users train models isoforms positive heritability nominal \\(P < 0.05\\) \\(0.01\\). Practical consideration: Prior heritability analysis model training, imperative expression data residualized relevant covariates (.e. principal components genotype matrix, hidden covariates PEER factors expression matrix, clinical/demographic covariates). general rule thumb include covariate eQTL/isoform-level eQTL analysis, include residualization process. Let’s jitter expression matrix little generate 10 bootstrapped estimates matrix. Keep mind replicates, theoretically, affect effect size estimates help seeding estimation process correlation isoforms/error multivariate model. Now, can train model using compute_isotwas() function. Make sure SNP matrix clear labels SNP identifiers relevant study. large SNP matrix take minutes run local machine. notes options function: selecting omega_est = 'replicates' , used bootstrapped replicates estimate correlation isoforms seed methods require matrix. alternative omega_est = 'mean' , use whatever matrix submit Y. omega_nlambda selects number steps fully dense fully sparse correlation matrix estimation. recommend 5-10 default . multiple methods predict expression. However, simulations real data examples, recommend five shown default method option. predict_nlambda number penalty variables considered mrce_lasso method. recommend 10-20 variable. family alpha multi_enet univariate determine elastic net regression run. default response follows Normal distribution mixing parameter set 0.5. run_all = TRUE, methods run. return_all = TRUE, predicted values isoform predictive performance methods isoforms outputted. can convert model list (output compute_isotwas()) tibble data.frame using convert_model(isotwas_model). Let’s take look sample model looks like: model object list Model R2 slot. Model slot stores list models isoform. can convert model list tibble using convert_model() function. Make sure annotation object position REF/ALT allele information.","code":"train_bed = system.file(\"extdata\", \"train.bed\", package = \"isotwas\") snps = bigsnpr::snp_attach(bigsnpr::snp_readBed2(train_bed,                                                  backingfile = tempfile())) dim(snps$genotypes[]) #> [1]  300 4542  isoform_mat = readRDS(system.file(\"extdata\", \"isoform_exp.RDS\", package = \"isotwas\")) dim(isoform_mat) #> [1] 300   3 boot_list = lapply(1:10,function(i){jitter(isoform_mat)})  isoform_mat_rep = rlist::list.rbind(boot_list)  rownames(isoform_mat_rep) = rep(paste0('Sample',1:nrow(snps$fam)),10)  colnames(isoform_mat_rep) = paste0('Isoform',1:ncol(isoform_mat_rep))  dim(isoform_mat_rep) #> [1] 3000    3 snp_mat = as.matrix(snps$genotypes[]) colnames(snp_mat) = snps$map$marker.ID rownames(snp_mat) = snps$fam$sample.ID isotwas_model = compute_isotwas(X = snp_mat,                                  Y = isoform_mat,                                  Y.rep = isoform_mat_rep,                                 R = 10,                                  id = rownames(isoform_mat_rep),                                  omega_est = 'replicates',                                  omega_nlambda = 5,                                  method = c('mrce_lasso',                                             'multi_enet',                                             'univariate',                                            'joinet',                                            'spls'),                                 predict_nlambda = 10,                                  family = 'gaussian',                                  scale = FALSE,                                  alpha = 0.5,                                  nfolds = 5,                                  verbose = TRUE,                                  tx_names = paste0('Isoform',1:3),                                  seed = 1789,                                  run_all = FALSE,                                  return_all = TRUE) model_isotwas = readRDS(system.file(\"extdata\", \"model_example.RDS\", package = \"isotwas\")) class(model_isotwas) #> [1] \"list\" length(model_isotwas) #> [1] 2 names(model_isotwas) #> [1] \"Model\" \"R2\" model_isotwas$Model[[1]] #> $Transcript #> [1] \"Isoform1\" #>  #> $Model #> # A tibble: 187 × 2 #>    SNP        Weight #>    <chr>       <dbl> #>  1 SNP10  -0.0000957 #>  2 SNP19  -0.00158   #>  3 SNP80  -0.00375   #>  4 SNP89  -0.000884  #>  5 SNP94  -0.00504   #>  6 SNP124  0.00586   #>  7 SNP195 -0.0201    #>  8 SNP232 -0.00627   #>  9 SNP233  0.000960  #> 10 SNP261 -0.00688   #> # ℹ 177 more rows #>  #> $R2 #> [1] 0.3174829 #>  #> $P #> value  #>     0  #>  #> $Pred #>       IND190       IND380       IND130       IND314       IND462       IND137  #> -0.395051620 -0.405521454 -0.405642239 -0.513143425 -0.219109235 -0.472395293  #>       IND191       IND228       IND253       IND358       IND318         IND3  #> -0.186011347 -0.047232532 -0.039820719 -0.203023847 -0.279393749 -0.177154706  #>        IND28       IND182        IND91       IND476       IND255       IND209  #> -0.261468441 -0.572125420 -0.351933854 -0.493579401 -0.417614473 -0.059488250  #>       IND135       IND223       IND340       IND120       IND115       IND391  #> -0.318086976 -0.319871820 -0.135863999  0.083039071 -0.469286056 -0.281497318  #>       IND304       IND163       IND386        IND69       IND121       IND269  #> -0.342756842 -0.169790486 -0.552650084 -0.339994140  0.018921426 -0.359762240  #>        IND24        IND31       IND349        IND32       IND332       IND495  #> -0.171493417 -0.450912106 -0.411439831 -0.220513041 -0.445241556 -0.302148360  #>       IND328       IND371       IND272        IND23        IND55       IND463  #> -0.572640195 -0.090248595 -0.172602006 -0.107964558 -0.450873553 -0.297293819  #>       IND194       IND441       IND113        IND47       IND502       IND409  #>  0.002500033 -0.082561510 -0.053926154  0.014315858 -0.263294983 -0.424747059  #>        IND82        IND48       IND303       IND176       IND393        IND52  #> -0.215259827 -0.180472021 -0.566428240 -0.154369420 -0.292469824 -0.125122866  #>       IND458       IND426        IND15        IND10       IND211       IND244  #> -0.297137749 -0.571241703 -0.271153164 -0.372562537 -0.139310663  0.058872696  #>        IND65        IND50       IND442       IND213       IND157       IND300  #> -0.353977257 -0.370280430 -0.369661968 -0.308463656 -0.015128680 -0.372327867  #>        IND25       IND254        IND49       IND199       IND189       IND295  #> -0.294685131  0.207142198 -0.265891894 -0.210070398 -0.125493031 -0.208084001  #>        IND88       IND459       IND339        IND46       IND325       IND419  #> -0.188952067 -0.341369214 -0.323699038 -0.194042453 -0.177038660  0.040164417  #>       IND302       IND216       IND178       IND282       IND186       IND239  #> -0.388742683 -0.144205644 -0.215211141 -0.347436381  0.070054061 -0.016246983  #>        IND89        IND71        IND33       IND494       IND369       IND109  #> -0.558938422 -0.009956788 -0.518804964 -0.397442503 -0.462158482 -0.620882241  #>        IND64       IND364         IND1       IND323        IND60       IND151  #> -0.470768744 -0.505031962 -0.474205183 -0.369106906 -0.183303208 -0.474395370  #>       IND293       IND437        IND85       IND324       IND375       IND423  #> -0.216436666 -0.452684526 -0.437603184 -0.588708106 -0.588703304 -0.443682464  #>       IND367       IND516        IND95       IND461       IND451        IND76  #> -0.601498157 -0.233798606 -0.410275308 -0.511844894 -0.326213821 -0.370696978  #>       IND298       IND310       IND222       IND102       IND491       IND422  #> -0.502436692 -0.408828852 -0.111287912 -0.226551260 -0.223498530  0.158679573  #>       IND351       IND309       IND277       IND214         IND0       IND438  #> -0.344041151 -0.424716100 -0.612379239 -0.231148880 -0.417714624 -0.438855224  #>       IND453       IND400       IND443       IND227       IND331       IND169  #> -0.594149200 -0.385144435 -0.456708590 -0.532575545 -0.315295504 -0.235696550  #>       IND197       IND142       IND416        IND51       IND346        IND27  #> -0.298466128  0.034104976 -0.526523901  0.508010660 -0.126042297 -0.128398444  #>       IND297       IND479       IND488       IND290        IND44       IND308  #> -0.259539348 -0.454747553 -0.504412520 -0.510470021 -0.142340184  0.072124794  #>       IND486         IND7       IND284       IND444       IND220       IND374  #> -0.329956853 -0.350941227 -0.163496962 -0.413414477 -0.593246582 -0.818095517  #>       IND500        IND11       IND354       IND246       IND439       IND392  #> -0.501920608 -0.214219476  0.007729149 -0.275404004 -0.644399750 -0.285348795  #>       IND448       IND506       IND192       IND484       IND203       IND452  #> -0.492513383 -0.310190245 -0.024709405 -0.435482280 -0.269321957 -0.552898172  #>        IND92       IND134       IND287       IND424       IND307       IND122  #> -0.101055241  0.008905316 -0.306358542 -0.461001763 -0.356879362  0.058371001  #>       IND414       IND212        IND20       IND127       IND236       IND258  #> -0.311646715 -0.111162671 -0.193471243  0.028880043 -0.407672480  0.142610577  #>       IND305       IND268       IND513       IND496       IND147       IND322  #> -0.340565157 -0.471679317 -0.404866473 -0.395120760 -0.072070907 -0.277843970  #>        IND45        IND68       IND201       IND348        IND43        IND75  #>  0.035081966 -0.363338384 -0.652974372 -0.412158936 -0.071163309 -0.080312324  #>        IND90        IND41       IND387       IND276       IND465       IND224  #>  0.025514564 -0.323200418 -0.477190145 -0.154720858 -0.341964318 -0.196673915  #>       IND481       IND143       IND226       IND480       IND126       IND498  #> -0.663275058 -0.056703898 -0.082764588 -0.210979906  0.048488465 -0.283945815  #>       IND233       IND195        IND61       IND173        IND97       IND478  #> -0.266472867 -0.217675991  0.014263476 -0.454493334 -0.550484287 -0.041911623  #>        IND18       IND397       IND180       IND315       IND338       IND359  #> -0.330665666 -0.436392508 -0.609082779 -0.569036586 -0.212491654 -0.343991921  #>       IND508       IND101       IND232       IND454       IND145       IND370  #> -0.477263014 -0.464338378 -0.072071562 -0.227516541 -0.389293368 -0.173894914  #>       IND159        IND12        IND77       IND421       IND112       IND289  #>  0.119232022 -0.094999753 -0.481360824 -0.433878747 -0.100941994 -0.581080319  #>       IND353       IND235        IND29       IND221       IND335       IND249  #> -0.332866777 -0.078403530 -0.340509458 -0.130391230 -0.223907121 -0.298415252  #>        IND84       IND296       IND183       IND344       IND259       IND384  #> -0.199496411 -0.410031721 -0.377059571 -0.693998245 -0.370623474 -0.246649423  #>       IND148       IND485       IND264        IND54       IND119       IND146  #> -0.271335029 -0.225853454 -0.261874967  0.087807798 -0.158416463 -0.214176185  #>        IND93        IND80        IND16       IND350       IND503       IND490  #> -0.420587615 -0.521984344 -0.070014457 -0.477095206 -0.366749255 -0.412342395  #>       IND270        IND70       IND385       IND433       IND428       IND280  #> -0.502675568 -0.087020068 -0.312957603 -0.141636588 -0.630821691 -0.190763136  #>       IND234       IND104       IND155       IND417       IND207        IND67  #> -0.145463209 -0.065338172 -0.102717325 -0.406053957 -0.487929907 -0.542512235  #>       IND471         IND6       IND413       IND412       IND245        IND96  #>  0.034250790 -0.327396727 -0.497126708 -0.185326538 -0.331678057 -0.078888704  #>        IND63       IND301       IND401       IND263       IND352       IND316  #> -0.238519359 -0.297359129 -0.424067348 -0.282617895 -0.050625075 -0.255118778  #>       IND341       IND489       IND388       IND457       IND181       IND431  #> -0.459988827 -0.313308038 -0.311893938  0.040361232 -0.454678575 -0.575772676  #>       IND140       IND512       IND330       IND420       IND377       IND139  #> -0.218079182 -0.400390897 -0.392403815 -0.258866066 -0.353999148  0.032783885  #>       IND171       IND165       IND395       IND436       IND475       IND167  #>  0.002110163 -0.083110045 -0.540800075 -0.680934271 -0.444409304 -0.160315170  #>       IND111       IND473       IND379       IND501       IND164       IND360  #> -0.189364791 -0.415996781 -0.534266922 -0.437482227 -0.269667607 -0.244362503  #>       IND390       IND376       IND425        IND66       IND243        IND39  #> -0.016687981 -0.300365083 -0.559132052 -0.397677303 -0.253962997 -0.157969029  #>       IND125        IND59       IND218       IND361       IND469       IND321  #>  0.198755812 -0.270404134 -0.157473118 -0.435929952 -0.198513588 -0.471754809 model_tsv = convert_model(model_isotwas,                           snp_annot = snps$map,                           snp_var = 'marker.ID') model_tsv #> # A tibble: 700 × 10 #>    SNP        Weight Transcript    R2  R2.P chromosome genetic.dist physical.pos #>    <chr>       <dbl> <chr>      <dbl> <dbl>      <int>        <int>        <int> #>  1 SNP10    -9.57e-5 Isoform1   0.317     0          1            0        10099 #>  2 SNP100   -2.42e-3 Isoform3   0.425     0          1            0       100107 #>  3 SNP1009   2.15e-3 Isoform3   0.425     0          1            0      1009108 #>  4 SNP101    8.68e-3 Isoform2   0.463     0          1            0       101086 #>  5 SNP1012  -1.99e-2 Isoform1   0.317     0          1            0      1012093 #>  6 SNP1017  -7.31e-3 Isoform2   0.463     0          1            0      1017093 #>  7 SNP1020   4.89e-3 Isoform2   0.463     0          1            0      1020103 #>  8 SNP1025   3.36e-2 Isoform1   0.317     0          1            0      1025113 #>  9 SNP103   -5.00e-2 Isoform2   0.463     0          1            0       103078 #> 10 SNP1042  -1.09e-2 Isoform2   0.463     0          1            0      1042088 #> # ℹ 690 more rows #> # ℹ 2 more variables: allele1 <chr>, allele2 <chr>"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/articles/stageassoc.html","id":"pre-computed-models-and-ld-matrix","dir":"Articles","previous_headings":"","what":"Pre-computed models and LD matrix","title":"Run isoTWAS associations","text":"can always use set models trained isoform expression QTL data (paired genotype RNA-seq data). convenience, trained made publicly available isoTWAS models 48 tissues Genotype-Tissue Expression Project (GTEx), adult brain cortex PsychENCODE AMP-AD, developmental brain cortex PsychENCODE. Zenodo repositories GTEx, adult cortex, developmental cortex models. Please cite manuscript associated Zenodo DOI use models. download entire Zenodo repository, may use Python package Zenodo_get (https://zenodo.org/record/1261813). install use, sample commands directly download adult cortex repository Zenodo: tutorial, using isoTWAS models 3 genes: CDC42 (ENSG00000070831), WNT4 (ENSG00000162552), CDC42-IT1 (ENSG00000230068). Let’s take look models look like, saved .RDS files. train models, ensure model files contain columns : isoform name, SNP name rsID, chromosome SNP, position SNP, alternative allele, reference allele, predictive weight isoform. reference, models include genome build model trained, users can align GWAS models based genome build. also include -sample LD matrices isoTWAS model. simply .RDS files contain square matrix LD SNPs correspondin row column. Note column row names matrix correspond rsIDs model. Practical consideration: many settings, corresponding file contains LD matrix SNPs locus. case, suggest either one two approaches. First, can generate LD matrix data model trained, access individual-level genotypes data. Alternatively, can use LD reference panel well-aligned genetic ancestry training dataset. LD reference panel usually 1000 Genomes, since ’s publicly available. can use bigsnpr::snp_cor bigsnpr::bed_cor generate similar-looking LD matrices, given PLINK style files (.bed/.bim/.fam) LD reference.","code":"pip install zenodo-get zenodo_get 8048198 model_test = readRDS(system.file(\"extdata\",                                  \"ENSG00000070831_isoTWAS.RDS\",                                  package = \"isotwas\")) head(model_test) ##           Feature        SNP Chromosome Position Build ALT REF        Weight ## 2 ENST00000344548 rs10917023          1 21599110  hg38   A   G  0.0257706583 ## 3 ENST00000344548 rs10917145          1 22086152  hg38   A   G -0.2503237794 ## 4 ENST00000344548 rs11584687          1 22550747  hg38   A   G  0.0200388736 ## 5 ENST00000344548 rs12082914          1 21493245  hg38   G   T  0.0167839153 ## 6 ENST00000344548 rs12118362          1 21445504  hg38   G   A  0.0133152139 ## 7 ENST00000344548 rs12127343          1 21543280  hg38   A   G  0.0007759457 ##           R2            Gene ## 2 0.09314035 ENSG00000070831 ## 3 0.09314035 ENSG00000070831 ## 4 0.09314035 ENSG00000070831 ## 5 0.09314035 ENSG00000070831 ## 6 0.09314035 ENSG00000070831 ## 7 0.09314035 ENSG00000070831 LD_test = readRDS(system.file(\"extdata\",                                  \"ENSG00000070831_LDMatrix.RDS\",                                  package = \"isotwas\")) head(as.matrix(LD_test)[,1:10]) ## Loading required package: Matrix ##            rs10916927  rs6658526  rs1354792 rs12567861 rs10916930  rs7521711 ## rs10916927  1.0000000  0.9440432  0.8544395 -0.6393393 -0.6405133  0.8536513 ## rs6658526   0.9440432  1.0000000  0.8005756 -0.5896286 -0.5924963  0.7998371 ## rs1354792   0.8544395  0.8005756  1.0000000 -0.7649469 -0.7657869  0.9990775 ## rs12567861 -0.6393393 -0.5896286 -0.7649469  1.0000000  0.9971883 -0.7642413 ## rs10916930 -0.6405133 -0.5924963 -0.7657869  0.9971883  1.0000000 -0.7650804 ## rs7521711   0.8536513  0.7998371  0.9990775 -0.7642413 -0.7650804  1.0000000 ##             rs4654899   rs960564  rs6663452  rs7532667 ## rs10916927  0.9097877  0.9966544  0.9501309  0.9971286 ## rs6658526   0.8503948  0.9427488  0.8973393  0.9458899 ## rs1354792   0.9361329  0.8530981  0.8951509  0.8538566 ## rs12567861 -0.7173327 -0.6390579 -0.6724022 -0.6393520 ## rs10916930 -0.7179086 -0.6402319 -0.6737519 -0.6405219 ## rs7521711   0.9371127  0.8532494  0.8952461  0.8530689"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/articles/stageassoc.html","id":"preparing-the-gwas-summary-statistics","dir":"Articles","previous_headings":"","what":"Preparing the GWAS summary statistics","title":"Run isoTWAS associations","text":"last file need GWAS summary statistics trait interest. tutorial, using GWAS summary statistics schizophrenia, made available Psychiatric Genomics Consortium. specifically using GWAS summary statistics European-ancestry individual. can find files : https://figshare.com/articles/dataset/scz2022/19426775. Since GWAS summary statistics often varied column names, use munging script clean data. addition, subset GWAS summary statistics SNPs annotated HapMap3 ensure maximal overlap. munging script available , courtesy Michael Margolis. tutorial, subsetted SNPs within SCN2A/SCN3A locus. Let’s take look munged file. munged summary statistics table 5 columns: SNP rsID, alternative allele, reference allele, Z-score (beta value divided standard error) GWAS association, effective sample size. advise use munging script format summary statistics files. least, please ensure summary statistics file contains column SNP identifier, alternative allele, either Z-score beta value standard error SNP.","code":"gwas = read.table(system.file(\"extdata\",                               \"tutorial_SCZ_2022.hm3_filter.sumstats.gz\",                               package = \"isotwas\"),                   header=T) head(gwas) ##          SNP A1 A2      Z        N ## 1 rs10916927  T  C  3.108 146347.8 ## 2  rs6658526  C  T  2.954 146347.8 ## 3  rs1354792  T  C  1.636 146347.8 ## 4 rs12567861  C  T -1.641 146347.8 ## 5 rs10916930  T  C -1.684 146347.8 ## 6  rs7521711  A  G  1.627 146347.8"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/articles/stageassoc.html","id":"generating-nominal-z-scores","dir":"Articles","previous_headings":"","what":"Generating nominal Z-scores","title":"Run isoTWAS associations","text":"first step isoTWAS trait-mapping generate isoform-level Z-scores using weighted burden test. general, ’ll vector gene names corresponding isoTWAS model files /LD files. following code snippet loops vector genes, reads model file LD file, computes Z-score isoform gene well-predicted cross-validation. out_df variable contains data frame 7 columns: gene name, isoform name, isoform-level Z-score trait association, P-value corresponding Z-score, permutation P-value (), top SNP based GWAS P-value within 1 Mb gene locus, P-value corresponding GWAS SNP. permutation test test assesses much signal added isoform expression, given GWAS architecture locus, controls large LD blocks. shuffle SNP--isoform weights generate null distribution use null generate permutation P-value. run permutation test nominal P-value isoform-level Z-score less alpha, defined burdenTest function.","code":"gene_names = c('ENSG00000070831',                'ENSG00000162552',                'ENSG00000230068') out_df = data.frame(Gene = c(),                     Feature = c(),                     Z = c(),                     P = c(),                     permute.P = c(),                     topSNP = c(),                     topSNP.P = c())  for (gene in gene_names){      model = readRDS(system.file(\"extdata\",                               paste0(gene,\"_isoTWAS.RDS\"),                               package = \"isotwas\"))   ld = readRDS(system.file(\"extdata\",                            paste0(gene,\"_LDMatrix.RDS\"),                            package = \"isotwas\"))      for (tx in unique(model$Feature)){          sumstats.cur = subset(gwas,SNP %in% subset(model, Feature == tx)$SNP)     tx_df = isotwas::burdenTest(mod = subset(model, Feature == tx),                        ld = ld,                        gene = gene,                        sumStats = sumstats.cur,                        chr = 'Chromosome',                        pos = 'Position',                        a1 = 'A1',                        a2 = 'A2',                        a1_mod = 'ALT',                        a2_mod = 'REF',                        snpName = 'SNP',                        Z = 'Z',                        beta = NULL,                        se = NULL,                        featureName = 'Feature',                        R2cutoff = .01,                        alpha = 1e-3,                        nperms = 1000,                        usePos = F)     out_df = rbind(out_df,tx_df)        } } ## Registered S3 methods overwritten by 'huge': ##   method    from ##   plot.roc  pROC ##   plot.sim  lava ##   print.roc pROC ##   print.sim lava ## Registered S3 methods overwritten by 'spls': ##   method         from  ##   predict.splsda caret ##   print.splsda   caret head(out_df) ##              Gene         Feature         Z            P   permute.P     topSNP ## 1 ENSG00000070831 ENST00000344548 -3.239210 0.0011986108 1.000000000  rs2143103 ## 2 ENSG00000070831 ENST00000315554  1.268410 0.2046514827 1.000000000 rs11582542 ## 3 ENSG00000070831 ENST00000656825  3.268385 0.0010816323 1.000000000 rs11582542 ## 4 ENSG00000070831 ENST00000498236 -2.906460 0.0036554386 1.000000000 rs11582542 ## 5 ENSG00000070831 ENST00000400259  3.344840 0.0008232993 0.006993007 rs11582542 ## 6 ENSG00000070831 ENST00000667384  0.575199 0.5651567515 1.000000000 rs11582542 ##       topSNP.P ## 1 0.0004331767 ## 2 0.0003396706 ## 3 0.0003396706 ## 4 0.0003396706 ## 5 0.0003396706 ## 6 0.0003396706"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/articles/stageassoc.html","id":"stage-wise-hypothesis-test","dir":"Articles","previous_headings":"","what":"Stage-wise hypothesis test","title":"Run isoTWAS associations","text":"isoTWAS employs two-step testing framework. First, control false discovery rate (FDR) across gene families, using either Benjamini-Hochberg FDR control (recommended) Bonferroni. Next, genes pass FDR control (adjusted P-values genes lower defined significance threshold), drop isoform level run family-wise error rate (FWER) control using Shaffer’s modified sequentially rejective Bonferroni procedure. , controlling FDR (alpha1) FWER (alpha2) 0.05. Let’s run first stage now: gene-level FDR control. see , gene-level, 3 genes pass FDR control. , see adjusted screening P-value less 0.05 3 genes. Now, drop isoform level 3 genes. Let’s run second stage: isoform-level FWER control gene families. now generated screening gene-level FDR-adjusted P-values confirmation isoform-level FWER controlled P-values. see 3 isoforms locus pass 3 levels hypothesis testing: screening FDR-adjusted P < 0.05, confirmation FWER-adjusted P < 0.05, nominal permutation P < 0.05. isoforms ENST00000400259 (gene: ENSG00000070831), ENST00000290167 (gene: ENSG00000162552), ENST00000431803 (gene: ENSG00000230068).","code":"suppressPackageStartupMessages(require(tidyverse)) gene = out_df %>%   group_by(Gene) %>%   summarise(Screen.P = isotwas::p_screen(P)) gene = as.data.frame(gene) head(gene) ##              Gene     Screen.P ## 1 ENSG00000070831 0.0016636386 ## 2 ENSG00000162552 0.0008302377 ## 3 ENSG00000230068 0.0004539979 alpha1=.05 G = nrow(gene) gene$Screen.P.Adjusted = p.adjust(gene$Screen.P,method = 'fdr') R = length(unique(gene$Gene[gene$Screen.P.Adjusted < alpha1])) alpha2 = (R*alpha1)/G print(gene) ##              Gene     Screen.P Screen.P.Adjusted ## 1 ENSG00000070831 0.0016636386       0.001663639 ## 2 ENSG00000162552 0.0008302377       0.001245357 ## 3 ENSG00000230068 0.0004539979       0.001245357 isoform_new = as.data.frame(matrix(nrow = 0,                                    ncol = ncol(out_df)+2)) colnames(isoform_new) = c(colnames(out_df),'Screen.P','Confirmation.P') gene = gene[order(gene$Screen.P),] ttt = merge(out_df,             gene[,c('Gene','Screen.P',                     'Screen.P.Adjusted')],             by = 'Gene')    isoform_new = ttt %>%   group_by(Gene) %>%   summarise(Feature = Feature,             Confirmation.P = isotwas::p_confirm(P,alpha = alpha2)) ## `summarise()` has grouped output by 'Gene'. You can override using the ## `.groups` argument. isoform_new = merge(isoform_new,ttt,by=c('Gene','Feature')) isoform_new$Confirmation.P = ifelse(isoform_new$Screen.P.Adjusted < 0.05,                                     isoform_new$Confirmation.P,                                     1) isoform_new = isoform_new[,c('Gene','Feature','Z','P','permute.P',                              'topSNP','topSNP.P',                              'Screen.P','Screen.P.Adjusted','Confirmation.P')] print(isoform_new) ##               Gene         Feature         Z            P   permute.P ## 1  ENSG00000070831 ENST00000315554  1.268410 0.2046514827 1.000000000 ## 2  ENSG00000070831 ENST00000344548 -3.239210 0.0011986108 1.000000000 ## 3  ENSG00000070831 ENST00000400259  3.344840 0.0008232993 0.006993007 ## 4  ENSG00000070831 ENST00000498236 -2.906460 0.0036554386 1.000000000 ## 5  ENSG00000070831 ENST00000656825  3.268385 0.0010816323 1.000000000 ## 6  ENSG00000070831 ENST00000662562 -3.278162 0.0010448529 1.000000000 ## 7  ENSG00000070831 ENST00000667384  0.575199 0.5651567515 1.000000000 ## 8  ENSG00000162552 ENST00000290167 -3.441877 0.0005776926 0.048951049 ## 9  ENSG00000162552 ENST00000415567 -3.179540 0.0014750883 1.000000000 ## 10 ENSG00000230068 ENST00000431803 -3.506525 0.0004539979 0.011988012 ##        topSNP     topSNP.P     Screen.P Screen.P.Adjusted Confirmation.P ## 1  rs11582542 0.0003396706 0.0016636386       0.001663639   1.0000000000 ## 2   rs2143103 0.0004331767 0.0016636386       0.001663639   0.0062691173 ## 3  rs11582542 0.0003396706 0.0016636386       0.001663639   0.0049397958 ## 4  rs11582542 0.0003396706 0.0016636386       0.001663639   0.0109663157 ## 5  rs11582542 0.0003396706 0.0016636386       0.001663639   0.0062691173 ## 6   rs2143103 0.0004331767 0.0016636386       0.001663639   0.0062691173 ## 7  rs11582542 0.0003396706 0.0016636386       0.001663639   1.0000000000 ## 8  rs11582542 0.0003396706 0.0008302377       0.001245357   0.0005776926 ## 9  rs11582542 0.0003396706 0.0008302377       0.001245357   0.0014750883 ## 10 rs11582542 0.0003396706 0.0004539979       0.001245357   0.0000000000 print(subset(isoform_new,Screen.P.Adjusted < alpha1 &                Confirmation.P < alpha2 &                permute.P < 0.05)) ##               Gene         Feature         Z            P   permute.P ## 3  ENSG00000070831 ENST00000400259  3.344840 0.0008232993 0.006993007 ## 8  ENSG00000162552 ENST00000290167 -3.441877 0.0005776926 0.048951049 ## 10 ENSG00000230068 ENST00000431803 -3.506525 0.0004539979 0.011988012 ##        topSNP     topSNP.P     Screen.P Screen.P.Adjusted Confirmation.P ## 3  rs11582542 0.0003396706 0.0016636386       0.001663639   0.0049397958 ## 8  rs11582542 0.0003396706 0.0008302377       0.001245357   0.0005776926 ## 10 rs11582542 0.0003396706 0.0004539979       0.001245357   0.0000000000"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/articles/stageassoc.html","id":"fine-mapping-overlapping-and-trait-associated-isoforms","dir":"Articles","previous_headings":"","what":"Fine-mapping overlapping and trait-associated isoforms","title":"Run isoTWAS associations","text":"Since two isoforms overlap likely share LD-linked SNPs predict isoform, can’t sure three isoforms likely carrying trait association signal. short, account correlations genetically-predicted portions expression isoforms, enumerate possible causal configurations, use Bayesian approach generate posterior inclusion probability (PIP) isoform. PIPs can used generate 90% credible set isoforms best explain trait association locus. See Mancuso et al’s manuscript gene-level fine-mapping intuition mathematical details. fine-mapping, longer need GWAS summary statistics. need: TWAS summary statistics (something looks like isoform_new), isoTWAS models, LD reference panel. , need make sure LD reference matrix contains SNPs models isoforms overlapping locus. -sample individual-level genotypes, recommend using 1000 Genomes. ease tutorial, compiled necessary LD matrix. First, annotate isoform location select significantly associated isoforms within 1 Mb one another. Significant isoforms overlap within 1 Mb another significant isoform need fine-mapped. Now, aggregate models generate single table SNP--isoform weights SNPs predict overlapping isoforms. step generates data frame model.df includes SNPs isoTWAS models locus effect (non-zero otherwise) isoforms fine-mapping locus. Now, obtain LD matrix SNPs model.df$SNP Now, run fine-mapping process following steps: (1) compute correlation genetically-predicted expression isoforms, (2) enumerate causal configurations, (3) compute marginal likelihoods Bayes factors isoform, (4) compute posterior inclusion probabilities credible sets. can see, ENST00000431803 ENST00000290167 PIP = 1 90% credible set (in_cred_set column). Full scripts association testing genome-wide available .","code":"suppressPackageStartupMessages(require(biomaRt)) gene_names = unique(isoform_new$Gene) ensembl <- useEnsembl(biomart = \"ensembl\",                     dataset = \"hsapiens_gene_ensembl\",                     mirror = \"useast\") bm = getBM(attributes = c('ensembl_gene_id',                            'chromosome_name',                           'start_position',                           'end_position'),       filters = 'ensembl_gene_id',       values = gene_names,        mart = ensembl) colnames(bm) = c('Gene','Chromosome','Start','End') isoform_new = merge(bm,isoform_new,by='Gene')  isoform_new = isoform_new[order(isoform_new$Chromosome,                                 isoform_new$Start,                                 decreasing = F),] isoform_sig = subset(isoform_new,                      Screen.P.Adjusted < alpha1 &                        Confirmation.P < alpha2 &                        permute.P < 0.05)  keep.isoform = c() if (nrow(isoform_sig) > 1){       for (i in 1:(nrow(isoform_sig)-1)){         if (isoform_sig$End[i] > isoform_sig$Start[i+1] - 1e6){           keep.isoform = unique(c(keep.isoform,                               c(isoform_sig$Feature[c(i,i+1)])))         }       }   } isoform_sig = subset(isoform_sig,Feature %in% keep.isoform) all.snps = c() omega = c() pos = c() gene = c() snp.chr = c()  ### COLLECT WEIGHTS FOR SNPS IN THE MODELS for (i in 1:nrow(isoform_sig)){   gene_in = isoform_sig$Gene[i]   model_in = readRDS(system.file(\"extdata\",                               paste0(gene_in,\"_isoTWAS.RDS\"),                               package = \"isotwas\"))   model_in = subset(model_in,                     Feature == isoform_sig$Feature[i])   Model = data.frame(SNP = model_in$SNP,                      Chromosome = model_in$Chromosome,                      Position = model_in$Position,                      Effect = model_in$Weight,                      A1 = model_in$ALT,                      A2 = model_in$REF)   Model = subset(Model,Effect!=0)   Model = Model[!duplicated(Model$SNP),]   all.snps = c(all.snps,                as.character(Model$SNP))   omega = c(omega,             as.numeric(Model$Effect))   gene = c(gene,            rep(isoform_sig$Feature[i],nrow(Model)))   snp.chr = c(snp.chr,               as.numeric(Model$Chromosome))   pos = c(pos,as.numeric(Model$Position)) }  tot.df = data.frame(SNP = all.snps,                     Gene = gene,                     Effect = omega,                     Chromosome = snp.chr)  model.df = as.data.frame(matrix(nrow = length(unique(all.snps)),                                 ncol = nrow(isoform_sig)+1)) colnames(model.df) = c('SNP',isoform_sig$Feature) model.df$SNP = as.character(unique(all.snps))  for (q in 1:nrow(isoform_sig)){   cur.tot.df = subset(tot.df,Gene == isoform_sig$Feature[q])   cur.tot.df$SNP = as.character(cur.tot.df$SNP)   for (i in 1:nrow(model.df)){     w = which(cur.tot.df$SNP == model.df$SNP[i])     model.df[i,q+1] = ifelse(length(w) != 0,                              cur.tot.df$Effect[w],                              0)   } }  model.df$Chromosome = 2 for (i in 1:nrow(model.df)){   rrr = subset(tot.df,SNP == model.df$SNP[i])   model.df$Chromosome[i] = rrr$Chromosome[1] }  head(model.df) ##          SNP ENST00000400259 ENST00000431803 ENST00000290167 Chromosome ## 1  rs1002480   -3.437902e-04    8.726253e-05               0          1 ## 2  rs1011380   -5.231286e-05    8.881914e-05               0          1 ## 3  rs1014986    7.976357e-05    1.177811e-03               0          1 ## 4 rs10157808    2.620658e-04    2.047407e-05               0          1 ## 5  rs1018102    4.699228e-05    1.019356e-04               0          1 ## 6 rs10218584   -6.270159e-05    3.580614e-06               0          1 V = readRDS(system.file(\"extdata\",                         \"test_LD_finemapping.RDS\",                         package = \"isotwas\")) V = V[model.df$SNP,model.df$SNP] Omega = Matrix::Matrix(as.matrix(model.df[,-c(1,ncol(model.df))])) zscores = isoform_sig$Z m = length(zscores)  ### COMPUTE LD BETWEEN TX ON THE GENETIC LEVEL wcor = isotwas::estimate_cor(as.matrix(Omega),                              as.matrix(V),                              intercept=T)[[1]] diag(wcor) = 1 wcor[is.na(wcor)] = 0  ### COMPUTE LD INTERCEPT BETWEEN ISOFRM ON THE GENETIC LEVEL swld = isotwas::estimate_cor(as.matrix(Omega),                              as.matrix(V),                              intercept=T)[[2]]          null_res = m * log(1 - 1e-3) marginal = m * log(1 - 1e-3) comb_list = list() for (n in 1:min(3,length(zscores))){   comb_list = c(comb_list,                 combn(1:length(zscores),n,simplify=F))   }  pips = rep(0,length(zscores))  ### COMPUTE BAYES FACTORS/LIKELIHOOD AT EACH CAUSAL CONFIG for (j in 1:length(comb_list)){   subset = comb_list[[j]]   local = isotwas::bayes_factor(zscores,                                 idx_set = subset,                                 wcor = wcor)      marginal = log(exp(local) + exp(marginal))   for (idx in subset){     if (pips[idx] == 0){       pips[idx] = local       } else {         pips[idx] = log(exp(pips[idx]) + exp(local))       }   }   }  pips = exp(pips - marginal) null_res = exp(null_res - marginal) isoform_sig$pip = pips isoform_sig = isoform_sig[order(isoform_sig$pip,decreasing = T),] npost = isoform_sig$pip/sum(isoform_sig$pip) csum = cumsum(npost) isoform_sig$in_cred_set = F  for (i in 1:nrow(isoform_sig)){   isoform_sig$in_cred_set[i] = T   if (i > 1){     if (csum[i] > .9 & csum[i-1] < .9){       isoform_sig$in_cred_set[i] = T     }     if (csum[i] < .9){       isoform_sig$in_cred_set[i] = T     }     if (csum[i] > .9 & csum[i-1] > .9){       isoform_sig$in_cred_set[i] = F       }   } }  print(isoform_sig) ##               Gene Chromosome    Start      End         Feature         Z ## 3  ENSG00000070831          1 22052627 22101360 ENST00000400259  3.344840 ## 10 ENSG00000230068          1 22059197 22064199 ENST00000431803 -3.506525 ## 8  ENSG00000162552          1 22117313 22143969 ENST00000290167 -3.441877 ##               P   permute.P     topSNP     topSNP.P     Screen.P ## 3  0.0008232993 0.006993007 rs11582542 0.0003396706 0.0016636386 ## 10 0.0004539979 0.011988012 rs11582542 0.0003396706 0.0004539979 ## 8  0.0005776926 0.048951049 rs11582542 0.0003396706 0.0008302377 ##    Screen.P.Adjusted Confirmation.P       pip in_cred_set ## 3        0.001663639   0.0049397958 1.0000000        TRUE ## 10       0.001245357   0.0000000000 1.0000000        TRUE ## 8        0.001245357   0.0005776926 0.2439366        TRUE"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Arjun Bhattacharya. Author, maintainer.","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bhattacharya (2023). isotwas: Isoform-level transcriptome-wide association studies. R package version 1.0.0.","code":"@Manual{,   title = {isotwas: Isoform-level transcriptome-wide association studies},   author = {Arjun Bhattacharya},   year = {2023},   note = {R package version 1.0.0}, }"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/index.html","id":"isotwas","dir":"","previous_headings":"","what":"Isoform-level transcriptome-wide association studies","title":"Isoform-level transcriptome-wide association studies","text":"Welcome isotwas, package facilitates isoform-level transcriptome wide association studies (TWAS). package contains models train multivariate predictive models isoform-level expression run isoform-level trait mapping identify genetic associations complex traits. install: devtools::install_github(\"bhattacharya--bt/isotwas\")","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/bayes_factor.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute Bayes factors for TWAS Z-scores — bayes_factor","title":"Compute Bayes factors for TWAS Z-scores — bayes_factor","text":"function runs modified version FOCUS's Bayes factor calculation","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/bayes_factor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute Bayes factors for TWAS Z-scores — bayes_factor","text":"","code":"bayes_factor(   zscores,   idx_set,   wcor,   prior_chisq = 40,   prb = 0.001,   use_log = T )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/bayes_factor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute Bayes factors for TWAS Z-scores — bayes_factor","text":"zscores numeric, vector Z-scores idx_set character, ids transcripts wcor numeric, correlation matrix estimate_cor prior_chisq numeric, prior chi-square mean prb numeric, prior causal configuration use_log logical, use log bayes factors","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/bayes_factor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute Bayes factors for TWAS Z-scores — bayes_factor","text":"bayes factor vector","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/burdenTest.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute weighted burden test — burdenTest","title":"Compute weighted burden test — burdenTest","text":"function takes gene expression model MOSTWAS form GWAS summary statistics carries weighted burden Z-test trait","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/burdenTest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute weighted burden test — burdenTest","text":"","code":"burdenTest(   mod,   ld,   gene,   sumStats,   chr,   pos,   a1,   a2,   a1_mod = \"ALT\",   a2_mod = \"REF\",   snpName = \"SNP\",   Z = NULL,   beta = NULL,   se = NULL,   featureName = \"Feature\",   R2cutoff = 0.01,   alpha = 2.5e-06,   nperms = 1000,   usePos = F )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/burdenTest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute weighted burden test — burdenTest","text":"mod data.frame, model given isoform ld matrix, ld reference matrix gene character, gene name sumStats data frame, GWAS summary statistics chr character, colnames sumStats keeps chromosome pos character, colnames sumStats keeps position a1 character, colnames sumStats keeps ALT allele a2 character, colnames sumStats keeps REF allele a1_mod character, colnames model keeps ALT allele a2_mod character, colnames model keeps REF allele snpName character, colnames sumStats keeps SNP id Z character, colnames sumStats keeps Z score beta character, colnames sumStats keeps effect size se character, colnames sumStats keeps standard error featureName character, colname model keeps feature name R2cutoff numeric, predictive R2 cutoff alpha numeric, P-value threshold permutation testing nperms numeric, number permutations usePos logical, use SNP positions vs. SNP ids","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/burdenTest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute weighted burden test — burdenTest","text":"list results burden permutation tests","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_blup.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate BLUP on all columns — compute_blup","title":"Univariate BLUP on all columns — compute_blup","text":"function trains unvariate rrBLUP models individually isoform transcripts","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_blup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Univariate BLUP on all columns — compute_blup","text":"","code":"compute_blup(   X,   Y,   Omega,   scale = F,   nfolds = 5,   verbose,   par = F,   n.cores = NULL,   tx_names = NULL,   seed )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_blup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Univariate BLUP on all columns — compute_blup","text":"X matrix, design matrix SNP dosages Y matrix, matrix G isoform expression across columns Omega matrix, precision matrix Y scale logical, T/F scale Y Omega nfolds int, number CV folds verbose logical par logical, uses mclapply parallelize model fit n.cores int, number parallel cores tx_names vector, character vector tx names order columns Y seed int, random seed","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_blup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Univariate BLUP on all columns — compute_blup","text":"data frame elastic net, lasso, LMM based predictions","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_curds_whey.html","id":null,"dir":"Reference","previous_headings":"","what":"Breiman and Friedman's curds and whey multivariate regression with CV — compute_curds_whey","title":"Breiman and Friedman's curds and whey multivariate regression with CV — compute_curds_whey","text":"function trains curds whey multivariate regression cross-validated results","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_curds_whey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Breiman and Friedman's curds and whey multivariate regression with CV — compute_curds_whey","text":"","code":"compute_curds_whey(   X,   Y,   family = \"gaussian\",   alpha = 0.5,   nfolds = 5,   verbose,   par = F,   n.cores = NULL,   tx_names = NULL,   seed )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_curds_whey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Breiman and Friedman's curds and whey multivariate regression with CV — compute_curds_whey","text":"X matrix, design matrix SNP dosages Y matrix, matrix G isoform expression across columns family character, glmnet glm family alpha numeric, elastic net mixing parameter nfolds int, number CV folds verbose logical par logical, uses mclapply parallelize model fit n.cores int, number parallel cores tx_names vector, character vector tx names - order columns Y seed int, random seed","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_curds_whey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Breiman and Friedman's curds and whey multivariate regression with CV — compute_curds_whey","text":"data frame elastic net, lasso, LMM based predictions","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_finemap_regress.html","id":null,"dir":"Reference","previous_headings":"","what":"Fine-mapping and clustering SEs with SUR — compute_finemap_regress","title":"Fine-mapping and clustering SEs with SUR — compute_finemap_regress","text":"function feature selects SuSiE runs SUR cluster-robust SEs","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_finemap_regress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fine-mapping and clustering SEs with SUR — compute_finemap_regress","text":"","code":"compute_finemap_regress(   X,   Y,   Y.rep,   R,   id,   nfolds,   verbose = F,   tx_names = NULL,   coverage = 0.9,   seed )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_finemap_regress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fine-mapping and clustering SEs with SUR — compute_finemap_regress","text":"X matrix, design matrix SNP dosages Y matrix, matrix G mean isoform expression across columns Y.rep matrix, matrix G isoform expression replicates R int, number replicates id vector, vector sample ids showing rep id nfolds int, number folds verbose logical tx_names vector, character vector tx names - order columns Y coverage numeric, covarage credible sets seed int, random seed","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_finemap_regress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fine-mapping and clustering SEs with SUR — compute_finemap_regress","text":"isoTWAS model list","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_fixed.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate regression with covariance estimate — compute_fixed","title":"Multivariate regression with covariance estimate — compute_fixed","text":"function trains multivariate lasso given covariance estimate","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_fixed.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate regression with covariance estimate — compute_fixed","text":"","code":"compute_fixed(X, Y, lam2, Omega, tol.in, maxit.in, silent)"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_fixed.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate regression with covariance estimate — compute_fixed","text":"X matrix, design matrix SNP dosages Y matrix, matrix G isoform expression across columns lam2 numeric, lambda penalty LASSO Omega matrix, precision matrix Y tol.numeric, tolerance objective difference maxit.int, maximum number iteractions silent logical","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_fixed.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate regression with covariance estimate — compute_fixed","text":"list MRCE estimates","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_isotwas.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute isoTWAS model for a set of isoforms/transcripts — compute_isotwas","title":"Compute isoTWAS model for a set of isoforms/transcripts — compute_isotwas","text":"function runs MVR models set transcripts outputs best model","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_isotwas.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute isoTWAS model for a set of isoforms/transcripts — compute_isotwas","text":"","code":"compute_isotwas(   X,   Y,   gene_exp = NULL,   Y.rep,   R,   id,   omega_est = \"replicates\",   omega_nlambda = 10,   method = c(\"mrce_lasso\", \"curds_whey\", \"multi_enet\", \"joinet\", \"spls\", \"finemap\",     \"univariate\"),   predict_nlambda = 50,   family = \"gaussian\",   scale = F,   alpha = 0.5,   nfolds = 5,   verbose = F,   par = F,   n.cores = NULL,   tx_names = NULL,   seed = NULL,   run_all = T,   return_all = F,   tol.in = 0.001,   maxit.in = 1000,   coverage = 0.9 )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_isotwas.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute isoTWAS model for a set of isoforms/transcripts — compute_isotwas","text":"X matrix, design matrix SNP dosages Y matrix, matrix G isoform expression across columns gene_exp vector, vector total gene expression Y.rep matrix, matrix G isoform expression replicates R int, number replicates id vector, vector sample ids showing rep id omega_est character, 'replicates' 'mean' use Y.rep Y omega_nlambda int, number omegas generate method character, vector methods use predict_nlambda int, number lambdas MRCE family character, glmnet family scale logical, T/F scale Y Omega alpha numeric, elastic net mixing parameter nfolds int, number CV folds verbose logical par logical, uses mclapply parallelize model fit n.cores int, number parallel cores tx_names vector, character vector tx names - order columns Y seed int, random seed run_all logical, run methods return_all logical, return R2 models? tol.numeric, tolerance objective difference maxit.int, maximum number interactions coverage numeric, coverage cred set finemap regress","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_isotwas.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute isoTWAS model for a set of isoforms/transcripts — compute_isotwas","text":"optimal isoTWAS model","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_mrce.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate regression with covariance estimate — compute_mrce","title":"Multivariate regression with covariance estimate — compute_mrce","text":"function trains multivariate lasso given covariance estimate","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_mrce.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate regression with covariance estimate — compute_mrce","text":"","code":"compute_mrce(   X,   Y,   lambda = NULL,   nlambda = 50,   Omega,   nfolds = 5,   tol.in,   maxit.in,   verbose,   seed )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_mrce.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate regression with covariance estimate — compute_mrce","text":"X matrix, design matrix SNP dosages Y matrix, matrix G isoform expression across columns lambda vector, lambda penalty vector LASSO tune nlambda int, number lambda value parameter selection Omega matrix, precision matrix Y nfolds int, number CV folds tol.numeric, tolerance objective difference maxit.int, maximum number iteractions verbose logical seed int, random seed","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_mrce.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate regression with covariance estimate — compute_mrce","text":"CV MRCE fit","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_omega.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute precision matrix between isoforms — compute_omega","title":"Compute precision matrix between isoforms — compute_omega","text":"function computes covariance precision matrix columns isoform matrix","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_omega.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute precision matrix between isoforms — compute_omega","text":"","code":"compute_omega(   Y,   Y.rep,   R,   id,   method = c(\"replicates\", \"mean\"),   nlambda = 15,   verbose = F )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_omega.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute precision matrix between isoforms — compute_omega","text":"Y matrix, matrix G mean isoform expression across columns Y.rep matrix, matrix G isoform expression replicates R int, number replicates id vector, vector sample ids showing rep id method character, use Y.rep Y nlambda int, number matrices produce terms sparsity verbose logical","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_omega.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute precision matrix between isoforms — compute_omega","text":"covariance /precision matrix list huge form","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_spring.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate regression with covariance estimate using elastic net — compute_spring","title":"Multivariate regression with covariance estimate using elastic net — compute_spring","text":"function trains multivariate elastic-net given covariance estimate","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_spring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate regression with covariance estimate using elastic net — compute_spring","text":"","code":"compute_spring(   X,   Y,   Omega,   intercept = F,   normalize = T,   nfolds = 5,   tol.in,   maxit.in,   verbose = T,   par = F,   n.cores,   seed )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_spring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate regression with covariance estimate using elastic net — compute_spring","text":"X matrix, design matrix SNP dosages Y matrix, matrix G isoform expression across columns Omega matrix, precision matrix Y intercept logical, include intercept normalize logical, normalize X Y nfolds int, number CV folds tol.numeric, tolerance objective difference maxit.int, maximum number iterations verbose logical par logical, parallelize seed int, random seed ncores int, number cores","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/compute_spring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate regression with covariance estimate using elastic net — compute_spring","text":"CV MRCE fit","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/conditional_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional gene-level test — conditional_test","title":"Conditional gene-level test — conditional_test","text":"function tests gene association trait conditional isoforms","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/conditional_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional gene-level test — conditional_test","text":"","code":"conditional_test(w_gene, w_iso, ld, z, gene_name, tx_name)"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/conditional_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional gene-level test — conditional_test","text":"w_gene vector, weights gene w_iso matrix, weights significant isoforms ld matrix, LD matrix z vector, GWAS Z-scores gene_name character, gene name tx_name vector, character vector tx names order columns Y","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/conditional_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional gene-level test — conditional_test","text":"data frame conditional Z-scores combinations tx","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/conditional_test_focus.html","id":null,"dir":"Reference","previous_headings":"","what":"Conditional gene-level test — conditional_test_focus","title":"Conditional gene-level test — conditional_test_focus","text":"function tests gene association trait conditional isoforms","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/conditional_test_focus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conditional gene-level test — conditional_test_focus","text":"","code":"conditional_test_focus(w_gene, w_iso, ld, z, gene_name, tx_name)"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/conditional_test_focus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conditional gene-level test — conditional_test_focus","text":"w_gene vector, weights gene w_iso matrix, weights significant isoforms ld matrix, LD matrix z vector, GWAS Z-scores gene_name character, gene name tx_name vector, character vector tx names order columns Y","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/conditional_test_focus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conditional gene-level test — conditional_test_focus","text":"data frame conditional Z-scores combinations tx","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/convert_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert isotwas model list to tibble — convert_model","title":"Convert isotwas model list to tibble — convert_model","text":"function converts isotwas model returns tibble","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/convert_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert isotwas model list to tibble — convert_model","text":"","code":"convert_model(model, snp_annot = NULL, snp_var = NULL)"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/convert_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert isotwas model list to tibble — convert_model","text":"model, isotwas model snp_annot, annotations SNPs, typically map obj bigsnpr snp_var, column name SNP marker id","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/convert_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert isotwas model list to tibble — convert_model","text":"tibble model","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/curds_whey.html","id":null,"dir":"Reference","previous_headings":"","what":"Breiman and Friedman's curds and whey multivariate regression — curds_whey","title":"Breiman and Friedman's curds and whey multivariate regression — curds_whey","text":"function trains curds whey multivariate regression","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/curds_whey.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Breiman and Friedman's curds and whey multivariate regression — curds_whey","text":"","code":"curds_whey(   X,   Y,   family = \"gaussian\",   alpha = 0.5,   nfolds = 5,   verbose,   par = F,   n.cores = NULL,   tx_names = NULL )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/curds_whey.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Breiman and Friedman's curds and whey multivariate regression — curds_whey","text":"X matrix, design matrix SNP dosages Y matrix, matrix G isoform expression across columns family character, glmnet glm family alpha numeric, elastic net mixing parameter nfolds int, number CV folds verbose logical par logical, uses mclapply parallelize model fit n.cores int, number parallel cores tx_names vector, character vector tx names order columns Y","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/curds_whey.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Breiman and Friedman's curds and whey multivariate regression — curds_whey","text":"data frame elastic net, lasso, LMM based predictions","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/estimate_cor.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute correlation for fine-mapping — estimate_cor","title":"Compute correlation for fine-mapping — estimate_cor","text":"function runs modified version FOCUS's correlation matrix estimation","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/estimate_cor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute correlation for fine-mapping — estimate_cor","text":"","code":"estimate_cor(wmat, ldmat, intercept = F)"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/estimate_cor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute correlation for fine-mapping — estimate_cor","text":"wmat numeric, matrix weights ldmat numeric, matrix linkage disequilibrium intercept logical, T/F including intercept","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/estimate_cor.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute correlation for fine-mapping — estimate_cor","text":"correlation GReX /without intercept","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/finemap_regress.html","id":null,"dir":"Reference","previous_headings":"","what":"Fine-mapping and clustering SEs with SUR — finemap_regress","title":"Fine-mapping and clustering SEs with SUR — finemap_regress","text":"function feature selects SuSiE runs SUR cluster-robust SEs","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/finemap_regress.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Fine-mapping and clustering SEs with SUR — finemap_regress","text":"","code":"finemap_regress(   X,   Y,   Y.rep,   R,   id,   verbose = F,   tx_names = NULL,   coverage = 0.9 )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/finemap_regress.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Fine-mapping and clustering SEs with SUR — finemap_regress","text":"X matrix, design matrix SNP dosages Y matrix, matrix G mean isoform expression across columns Y.rep matrix, matrix G isoform expression replicates R int, number replicates id vector, vector sample ids showing rep id verbose logical tx_names vector, character vector tx names order columns Y coverage numeric, coverage credible set","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/finemap_regress.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Fine-mapping and clustering SEs with SUR — finemap_regress","text":"data frame elastic net, lasso, LMM based predictions","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/get_resid.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute residuals for Z-scores — get_resid","title":"Compute residuals for Z-scores — get_resid","text":"function runs modified version FOCUS's residual calculation","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/get_resid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute residuals for Z-scores — get_resid","text":"","code":"get_resid(zscores, swld, wcor)"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/get_resid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute residuals for Z-scores — get_resid","text":"zscores numeric, vector Z-scores swld numeric, LD matrix wcor numeric, correlation matrix estimate_cor","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/get_resid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute residuals for Z-scores — get_resid","text":"residuals residualized Z-scores","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_elasticnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate elastic net on all columns with row-wise penalty — multivariate_elasticnet","title":"Multivariate elastic net on all columns with row-wise penalty — multivariate_elasticnet","text":"function trains multivariate elastic net models isoform transcripts jointly","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_elasticnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate elastic net on all columns with row-wise penalty — multivariate_elasticnet","text":"","code":"multivariate_elasticnet(   X,   Y,   Omega,   scale = F,   alpha = 0.5,   nfolds = 5,   verbose = T,   par = F,   n.cores = NULL,   tx_names = NULL,   seed )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_elasticnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate elastic net on all columns with row-wise penalty — multivariate_elasticnet","text":"X matrix, design matrix SNP dosages Y matrix, matrix G isoform expression across columns Omega matrix, precision matrix Y scale logical, T/F scale Y Omega alpha numeric, elastic net mixing parameter nfolds int, number CV folds verbose logical par logical, uses mclapply parallelize model fit n.cores int, number parallel cores tx_names vector, character vector tx names order columns Y seed int, random seed","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_elasticnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate elastic net on all columns with row-wise penalty — multivariate_elasticnet","text":"data frame elastic net, lasso, LMM based predictions","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_joinet.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate stacked elastic net on all columns using joinet — multivariate_joinet","title":"Multivariate stacked elastic net on all columns using joinet — multivariate_joinet","text":"function trains multivariate elastic net models isoform transcripts jointly","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_joinet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate stacked elastic net on all columns using joinet — multivariate_joinet","text":"","code":"multivariate_joinet(   X,   Y,   Omega,   scale = F,   alpha = 0.5,   nfolds = 5,   verbose = T,   par = F,   n.cores = NULL,   tx_names = NULL,   seed )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_joinet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate stacked elastic net on all columns using joinet — multivariate_joinet","text":"X matrix, design matrix SNP dosages Y matrix, matrix G isoform expression across columns Omega matrix, precision matrix Y scale logical, T/F scale Y Omega alpha numeric, elastic net mixing parameter nfolds int, number CV folds verbose logical par logical, uses mclapply parallelize model fit n.cores int, number parallel cores tx_names vector, character vector tx names order columns Y seed int, random seed","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_joinet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate stacked elastic net on all columns using joinet — multivariate_joinet","text":"data frame elastic net, lasso, LMM based predictions","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_mmbr.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate SuSiE model — multivariate_mmbr","title":"Multivariate SuSiE model — multivariate_mmbr","text":"function trains multivariate SuSiE isoform transcripts jointly","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_mmbr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate SuSiE model — multivariate_mmbr","text":"","code":"multivariate_mmbr(   X,   Y,   nfolds = 5,   verbose = T,   tx_names = NULL,   L = 10,   par,   n.cores,   seed )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_mmbr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate SuSiE model — multivariate_mmbr","text":"X matrix, design matrix SNP dosages Y matrix, matrix G isoform expression across columns nfolds int, number CV folds verbose logical tx_names vector, character vector tx names order columns Y L int, number single effects par logical, uses mclapply parallelize model fit n.cores int, number parallel cores seed int, random seed","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_mmbr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate SuSiE model — multivariate_mmbr","text":"data frame mvSuSiE weights","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_mrmash.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate MrMash model — multivariate_mrmash","title":"Multivariate MrMash model — multivariate_mrmash","text":"function trains multivariate mr mash isoform transcripts jointly","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_mrmash.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate MrMash model — multivariate_mrmash","text":"","code":"multivariate_mrmash(   X,   Y,   nfolds = 5,   verbose = T,   tx_names = NULL,   par,   n.cores,   seed )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_mrmash.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate MrMash model — multivariate_mrmash","text":"X matrix, design matrix SNP dosages Y matrix, matrix G isoform expression across columns nfolds int, number CV folds verbose logical tx_names vector, character vector tx names order columns Y par logical, uses mclapply parallelize model fit n.cores int, number parallel cores seed int, random seed","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_mrmash.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate MrMash model — multivariate_mrmash","text":"mrmash models","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_spls.html","id":null,"dir":"Reference","previous_headings":"","what":"Multivariate sparse partial least squares — multivariate_spls","title":"Multivariate sparse partial least squares — multivariate_spls","text":"function trains multivariate spls isoform transcripts jointly","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_spls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multivariate sparse partial least squares — multivariate_spls","text":"","code":"multivariate_spls(   X,   Y,   nfolds = 5,   verbose = T,   tx_names = NULL,   par,   n.cores,   seed )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_spls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multivariate sparse partial least squares — multivariate_spls","text":"X matrix, design matrix SNP dosages Y matrix, matrix G isoform expression across columns nfolds int, number CV folds verbose logical tx_names vector, character vector tx names order columns Y par logical, uses mclapply parallelize model fit n.cores int, number parallel cores seed int, random seed","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/multivariate_spls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multivariate sparse partial least squares — multivariate_spls","text":"spls models","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/p_confirm.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute confirmation P-value for one gene — p_confirm","title":"Compute confirmation P-value for one gene — p_confirm","text":"function runs modified version Shaffer's MSRB procedure control family-wise error rate given gene","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/p_confirm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute confirmation P-value for one gene — p_confirm","text":"","code":"p_confirm(p, alpha = 0.05)"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/p_confirm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute confirmation P-value for one gene — p_confirm","text":"p numeric, vector TWAS P-values isoforms one gene alpha numeric, significance level","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/p_confirm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute confirmation P-value for one gene — p_confirm","text":"confirmation adjusted P-values isoforms one gene","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/p_screen.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute screening P-value for one gene — p_screen","title":"Compute screening P-value for one gene — p_screen","text":"function runs modified version P_ACT test hypothesis least one gene-transcript association","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/p_screen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute screening P-value for one gene — p_screen","text":"","code":"p_screen(teststat, mode = \"P\")"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/p_screen.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute screening P-value for one gene — p_screen","text":"teststat numeric, vector TWAS Z-scores P-values mode character, teststat Z-scores P-values?","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/p_screen.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute screening P-value for one gene — p_screen","text":"screen P-value one gene","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/twas_finemap.html","id":null,"dir":"Reference","previous_headings":"","what":"FOCUS-like gene-level finemapping — twas_finemap","title":"FOCUS-like gene-level finemapping — twas_finemap","text":"function runs probabilistic finemapping gene/isoform-level","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/twas_finemap.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"FOCUS-like gene-level finemapping — twas_finemap","text":"","code":"twas_finemap(   res.df,   z = \"Z\",   Omega,   V,   max_enum = 3,   cutoff = 0.9,   verbose = F )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/twas_finemap.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"FOCUS-like gene-level finemapping — twas_finemap","text":"res.df data.frame, TWAS results least Z scores transcript names z character, column name Z scores Omega matrix, matrix SNP transcript effect order res.df V matrix, LD matrix order Omega max_enum numeric, max number causals credible set cutoff numeric, proportion posterior explained credible set verbose logical, verbose","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/twas_finemap.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"FOCUS-like gene-level finemapping — twas_finemap","text":"data frame res.df pips whether isoform credible set","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/univariate_blup.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate BLUP on all columns — univariate_blup","title":"Univariate BLUP on all columns — univariate_blup","text":"function trains unvariate rrBLUP models individually isoform transcripts","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/univariate_blup.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Univariate BLUP on all columns — univariate_blup","text":"","code":"univariate_blup(   X,   Y,   Omega,   scale = F,   nfolds = 5,   verbose,   par = F,   n.cores = NULL,   tx_names = NULL,   seed )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/univariate_blup.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Univariate BLUP on all columns — univariate_blup","text":"X matrix, design matrix SNP dosages Y matrix, matrix G isoform expression across columns Omega matrix, precision matrix Y scale logical, T/F scale Y Omega nfolds int, number CV folds verbose logical par logical, uses mclapply parallelize model fit n.cores int, number parallel cores tx_names vector, character vector tx names order columns Y seed int, random seed","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/univariate_blup.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Univariate BLUP on all columns — univariate_blup","text":"data frame elastic net, lasso, LMM based predictions","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/univariate_elasticnet.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate elastic net on all columns — univariate_elasticnet","title":"Univariate elastic net on all columns — univariate_elasticnet","text":"function trains unvariate elastic models individually isoform transcripts","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/univariate_elasticnet.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Univariate elastic net on all columns — univariate_elasticnet","text":"","code":"univariate_elasticnet(   X,   Y,   Omega,   family = \"gaussian\",   scale = F,   alpha = 0.5,   nfolds = 5,   verbose,   par = F,   n.cores = NULL,   tx_names = NULL,   seed )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/univariate_elasticnet.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Univariate elastic net on all columns — univariate_elasticnet","text":"X matrix, design matrix SNP dosages Y matrix, matrix G isoform expression across columns Omega matrix, precision matrix Y family character, glmnet glm family scale logical, T/F scale Y Omega alpha numeric, elastic net mixing parameter nfolds int, number CV folds verbose logical par logical, uses mclapply parallelize model fit n.cores int, number parallel cores tx_names vector, character vector tx names order columns Y seed int, random seed","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/univariate_elasticnet.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Univariate elastic net on all columns — univariate_elasticnet","text":"data frame elastic net, lasso, LMM based predictions","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/univariate_susie.html","id":null,"dir":"Reference","previous_headings":"","what":"Univariate SuSiE on all columns — univariate_susie","title":"Univariate SuSiE on all columns — univariate_susie","text":"function trains unvariate SuSiE models individually isoform transcripts","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/univariate_susie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Univariate SuSiE on all columns — univariate_susie","text":"","code":"univariate_susie(   X,   Y,   Omega,   scale = F,   alpha = 0.5,   nfolds = 5,   verbose,   par = F,   n.cores = NULL,   tx_names = NULL,   seed )"},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/univariate_susie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Univariate SuSiE on all columns — univariate_susie","text":"X matrix, design matrix SNP dosages Y matrix, matrix G isoform expression across columns Omega matrix, precision matrix Y scale logical, T/F scale Y Omega alpha numeric, elastic net mixing parameter nfolds int, number CV folds verbose logical par logical, uses mclapply parallelize model fit n.cores int, number parallel cores tx_names vector, character vector tx names order columns Y seed int, random seed","code":""},{"path":"https://bhattacharya-a-bt.github.io/isotwas/reference/univariate_susie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Univariate SuSiE on all columns — univariate_susie","text":"data frame elastic net, lasso, LMM based predictions","code":""}]
